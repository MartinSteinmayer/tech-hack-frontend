This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  compliance/
    analyze/
      page.js
    page.js
  negotiations/
    dossier/
      page.js
    page.js
  orders/
    new/
      page.js
    page.js
  report/
    page.js
  suppliers/
    [id]/
      page.js
    page.js
  globals.css
  layout.js
  page.js
components/
  layout/
    Footer.jsx
    Navbar.jsx
    Sidebar.jsx
  ui/
    Alert.jsx
    Badge.jsx
    Button.jsx
    Card.jsx
    Empty.jsx
    FileUpload.jsx
    Input.jsx
    Modal.jsx
    Select.jsx
    Spinner.jsx
    Table.jsx
    Tabs.jsx
lib/
  api.js
  compliance.csv
  exportDataToCsv.js
  mockData.js
  negotiations.csv
  orders.csv
  suppliers.csv
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
README.md

================================================================
Files
================================================================

================
File: app/compliance/analyze/page.js
================
'use client';

import { useState, useRef } from 'react';
import Link from 'next/link';
import {
    FiArrowLeft,
    FiUpload,
    FiFileText,
    FiCheckCircle,
    FiAlertCircle,
    FiClock,
    FiX,
    FiSearch,
    FiDownload,
    FiExternalLink,
    FiInfo
} from 'react-icons/fi';
import { complianceApi } from '@/lib/api';

export default function DocumentAnalysisPage() {
    const fileInputRef = useRef(null);
    const [file, setFile] = useState(null);
    const [dragActive, setDragActive] = useState(false);
    const [analyzing, setAnalyzing] = useState(false);
    const [analysisResults, setAnalysisResults] = useState(null);

    // Mock analysis results for the hackathon
    const mockResults = {
        documentName: 'supplier_agreement_revision2.pdf',
        documentType: 'Supplier Agreement',
        status: 'review',
        complianceScore: 75,
        supplierName: 'Global Packaging Solutions',
        supplierId: 2,
        dateAnalyzed: new Date().toISOString(),
        summary: 'The document is generally compliant but contains some clauses that require review. Specific areas of concern include liability limitations, warranty periods, and data protection provisions.',
        sections: [
            {
                title: 'Document Identification',
                status: 'compliant',
                items: [
                    { name: 'Document Type', value: 'Supplier Agreement', status: 'compliant' },
                    { name: 'Parties Correctly Identified', value: 'Yes', status: 'compliant' },
                    { name: 'Agreement Date', value: '2023-08-15', status: 'compliant' },
                    { name: 'Version Control', value: 'Revision 2.0', status: 'compliant' },
                ]
            },
            {
                title: 'Core Terms',
                status: 'review',
                items: [
                    { name: 'Payment Terms', value: 'Net 45', status: 'compliant' },
                    { name: 'Delivery Terms', value: 'FOB Destination', status: 'compliant' },
                    { name: 'Contract Duration', value: '24 months', status: 'compliant' },
                    { name: 'Termination Clause', value: '60 days notice', status: 'review', notes: 'Standard is 30 days notice' },
                ]
            },
            {
                title: 'Liability & Warranties',
                status: 'non-compliant',
                items: [
                    { name: 'Liability Cap', value: 'Limited to 50% of contract value', status: 'non-compliant', notes: 'Below minimum requirement of 100% of contract value' },
                    { name: 'Warranty Period', value: '6 months', status: 'non-compliant', notes: 'Below minimum standard of 12 months' },
                    { name: 'Indemnification', value: 'Present, but limited scope', status: 'review', notes: 'Does not cover all required areas' },
                    { name: 'Insurance Requirements', value: 'Present and adequate', status: 'compliant' },
                ]
            },
            {
                title: 'Data & Confidentiality',
                status: 'review',
                items: [
                    { name: 'Confidentiality Clause', value: 'Present', status: 'compliant' },
                    { name: 'Data Protection', value: 'Present but incomplete', status: 'review', notes: 'Missing specific GDPR provisions' },
                    { name: 'Intellectual Property', value: 'Clearly defined', status: 'compliant' },
                    { name: 'Data Security Standards', value: 'Referenced but not detailed', status: 'review', notes: 'Should reference specific security standards' },
                ]
            },
            {
                title: 'Regulatory Compliance',
                status: 'compliant',
                items: [
                    { name: 'Environmental Standards', value: 'ISO 14001 commitment', status: 'compliant' },
                    { name: 'Labor Compliance', value: 'References all required standards', status: 'compliant' },
                    { name: 'Anti-corruption', value: 'FCPA and UK Bribery Act compliant', status: 'compliant' },
                    { name: 'Export Controls', value: 'Addressed adequately', status: 'compliant' },
                ]
            }
        ],
        recommendations: [
            'Renegotiate liability cap to at least 100% of contract value',
            'Extend warranty period to standard 12 months minimum',
            'Revise termination clause to align with company policy of 30 days notice',
            'Enhance data protection clauses to include specific GDPR requirements',
            'Add specific security standards for data handling'
        ]
    };

    const handleDrag = (e) => {
        e.preventDefault();
        e.stopPropagation();

        if (e.type === 'dragenter' || e.type === 'dragover') {
            setDragActive(true);
        } else if (e.type === 'dragleave') {
            setDragActive(false);
        }
    };

    const handleDrop = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);

        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            handleFile(e.dataTransfer.files[0]);
        }
    };

    const handleFileChange = (e) => {
        if (e.target.files && e.target.files[0]) {
            handleFile(e.target.files[0]);
        }
    };

    const handleFile = (file) => {
        // Check file type (pdf, doc, docx)
        const fileType = file.type;
        const validTypes = [
            'application/pdf',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/plain'
        ];

        if (!validTypes.includes(fileType)) {
            alert('Please upload a valid document file (PDF, DOC, DOCX, or TXT)');
            return;
        }

        // Check file size (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
            alert('File size exceeds 10MB limit');
            return;
        }

        setFile(file);
    };

    const removeFile = () => {
        setFile(null);
        setAnalysisResults(null);
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    };

    const analyzeDocument = async () => {
        if (!file) return;

        try {
            setAnalyzing(true);

            // In a real app, we would call the API
            // const formData = new FormData();
            // formData.append('document', file);
            // const response = await complianceApi.analyzeDocument(formData);
            // setAnalysisResults(response.data);

            // For the hackathon, simulate API call with mock data
            setTimeout(() => {
                setAnalysisResults(mockResults);
                setAnalyzing(false);
            }, 3000);
        } catch (error) {
            console.error('Error analyzing document:', error);
            setAnalyzing(false);
        }
    };

    // Function to get status badge styling
    const getStatusBadge = (status) => {
        switch (status) {
            case 'compliant':
                return 'bg-green-100 text-green-800';
            case 'review':
                return 'bg-yellow-100 text-yellow-800';
            case 'non-compliant':
                return 'bg-red-100 text-red-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    // Function to get status icon
    const getStatusIcon = (status) => {
        switch (status) {
            case 'compliant':
                return <FiCheckCircle className="h-5 w-5 text-green-500" />;
            case 'review':
                return <FiClock className="h-5 w-5 text-yellow-500" />;
            case 'non-compliant':
                return <FiAlertCircle className="h-5 w-5 text-red-500" />;
            default:
                return <FiFileText className="h-5 w-5 text-gray-500" />;
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <div className="flex items-center">
                    <Link href="/compliance" className="p-2 rounded-full hover:bg-gray-100 mr-2">
                        <FiArrowLeft className="h-5 w-5 text-gray-600" />
                    </Link>
                    <h1 className="text-2xl font-bold text-gray-800">Document Analysis</h1>
                </div>
                {analysisResults && (
                    <div className="flex space-x-3">
                        <button className="btn-secondary flex items-center">
                            <FiDownload className="mr-2" />
                            Export Report
                        </button>
                        <Link
                            href={`/compliance/verify?supplierId=${analysisResults.supplierId}`}
                            className="btn-primary flex items-center"
                        >
                            <FiCheckCircle className="mr-2" />
                            Verify Supplier
                        </Link>
                    </div>
                )}
            </div>

            {!analysisResults ? (
                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="mb-6">
                        <h2 className="text-lg font-semibold text-gray-800 mb-2">Upload Document for Analysis</h2>
                        <p className="text-gray-600">
                            Upload contracts, certificates, or other supplier documents to check for compliance with regulations and company policies.
                        </p>
                    </div>

                    {/* File Upload Area */}
                    <div
                        className={`mt-4 border-2 border-dashed rounded-lg p-6 ${dragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
                            }`}
                        onDragEnter={handleDrag}
                        onDragLeave={handleDrag}
                        onDragOver={handleDrag}
                        onDrop={handleDrop}
                    >
                        <div className="text-center">
                            {!file ? (
                                <>
                                    <FiUpload className="mx-auto h-12 w-12 text-gray-400" />
                                    <div className="mt-4 flex text-sm leading-6 text-gray-600">
                                        <label
                                            htmlFor="file-upload"
                                            className="relative cursor-pointer rounded-md font-semibold text-blue-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2 hover:text-blue-500"
                                        >
                                            <span>Upload a file</span>
                                            <input
                                                id="file-upload"
                                                name="file-upload"
                                                type="file"
                                                className="sr-only"
                                                ref={fileInputRef}
                                                onChange={handleFileChange}
                                                accept=".pdf,.doc,.docx,.txt"
                                            />
                                        </label>
                                        <p className="pl-1">or drag and drop</p>
                                    </div>
                                    <p className="text-xs text-gray-500">
                                        PDF, DOC, DOCX, or TXT up to 10MB
                                    </p>
                                </>
                            ) : (
                                <div className="flex items-center justify-center">
                                    <div className="flex items-center p-3 bg-gray-50 rounded-lg">
                                        <FiFileText className="h-10 w-10 text-blue-500 mr-3" />
                                        <div className="text-left">
                                            <p className="text-sm font-medium text-gray-900">{file.name}</p>
                                            <p className="text-xs text-gray-500">
                                                {(file.size / 1024).toFixed(2)} KB • {file.type}
                                            </p>
                                        </div>
                                        <button
                                            type="button"
                                            onClick={removeFile}
                                            className="ml-4 p-1 rounded-full text-gray-500 hover:bg-gray-200"
                                        >
                                            <FiX className="h-5 w-5" />
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>

                    {file && (
                        <div className="mt-6 flex justify-center">
                            <button
                                onClick={analyzeDocument}
                                className="btn-primary flex items-center"
                                disabled={analyzing}
                            >
                                {analyzing ? (
                                    <>
                                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                        Analyzing Document...
                                    </>
                                ) : (
                                    <>
                                        <FiSearch className="mr-2" />
                                        Analyze Document
                                    </>
                                )}
                            </button>
                        </div>
                    )}

                    {/* Quick Info About The Analysis */}
                    <div className="mt-8 border-t pt-6">
                        <h3 className="text-md font-medium text-gray-800 mb-4">What We Check For</h3>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="border rounded-lg p-4">
                                <div className="flex items-center mb-3">
                                    <div className="bg-blue-100 text-blue-600 p-2 rounded-full mr-3">
                                        <FiFileText className="h-5 w-5" />
                                    </div>
                                    <h4 className="font-medium">Document Structure</h4>
                                </div>
                                <p className="text-sm text-gray-600">
                                    We verify the document contains all required sections and legal clauses.
                                </p>
                            </div>

                            <div className="border rounded-lg p-4">
                                <div className="flex items-center mb-3">
                                    <div className="bg-purple-100 text-purple-600 p-2 rounded-full mr-3">
                                        <FiCheckCircle className="h-5 w-5" />
                                    </div>
                                    <h4 className="font-medium">Regulatory Compliance</h4>
                                </div>
                                <p className="text-sm text-gray-600">
                                    We check for adherence to industry regulations and legal requirements.
                                </p>
                            </div>

                            <div className="border rounded-lg p-4">
                                <div className="flex items-center mb-3">
                                    <div className="bg-green-100 text-green-600 p-2 rounded-full mr-3">
                                        <FiAlertCircle className="h-5 w-5" />
                                    </div>
                                    <h4 className="font-medium">Risk Assessment</h4>
                                </div>
                                <p className="text-sm text-gray-600">
                                    We identify potential risk factors and areas that require attention.
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* Upload Tips */}
                    <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                        <div className="flex items-start">
                            <FiInfo className="h-5 w-5 text-blue-500 mt-0.5 mr-3" />
                            <div>
                                <h4 className="font-medium text-blue-800 mb-1">Document Analysis Tips</h4>
                                <ul className="text-sm text-blue-700 space-y-1">
                                    <li>• Upload complete documents rather than excerpts for full analysis</li>
                                    <li>• Ensure documents are not password protected</li>
                                    <li>• For best results, upload documents with clear text (not scanned images)</li>
                                    <li>• Review the analysis report carefully and verify key findings</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            ) : (
                <div className="space-y-6">
                    {/* Analysis Results Summary */}
                    <div className="bg-white rounded-lg shadow-md p-6">
                        <div className="flex flex-col md:flex-row md:items-start justify-between gap-6">
                            <div>
                                <div className="flex items-center mb-2">
                                    <h2 className="text-lg font-semibold text-gray-800 mr-3">Analysis Results</h2>
                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(analysisResults.status)}`}>
                                        {analysisResults.status === 'compliant' ? 'Compliant' :
                                            analysisResults.status === 'review' ? 'Needs Review' :
                                                'Non-Compliant'}
                                    </span>
                                </div>
                                <p className="text-gray-600 mb-4">{analysisResults.documentName}</p>
                                <div className="flex items-center text-sm text-gray-500 mb-1">
                                    <FiFileText className="mr-2 h-4 w-4" />
                                    <span>Document Type: <span className="font-medium">{analysisResults.documentType}</span></span>
                                </div>
                                <div className="flex items-center text-sm text-gray-500 mb-1">
                                    <FiExternalLink className="mr-2 h-4 w-4" />
                                    <span>Supplier: <Link href={`/suppliers/${analysisResults.supplierId}`} className="font-medium text-blue-600 hover:underline">{analysisResults.supplierName}</Link></span>
                                </div>
                                <div className="flex items-center text-sm text-gray-500">
                                    <FiClock className="mr-2 h-4 w-4" />
                                    <span>Analyzed on: <span className="font-medium">{new Date(analysisResults.dateAnalyzed).toLocaleString()}</span></span>
                                </div>
                            </div>

                            <div className="bg-gray-50 p-4 rounded-lg md:w-64">
                                <div className="text-center">
                                    <h3 className="text-sm font-medium text-gray-500 mb-1">Compliance Score</h3>
                                    <div className="text-3xl font-bold text-gray-800 mb-2">{analysisResults.complianceScore}%</div>
                                    <div className="w-full bg-gray-200 rounded-full h-2.5">
                                        <div
                                            className={`h-2.5 rounded-full ${analysisResults.complianceScore >= 90 ? 'bg-green-500' :
                                                analysisResults.complianceScore >= 70 ? 'bg-yellow-500' :
                                                    'bg-red-500'
                                                }`}
                                            style={{ width: `${analysisResults.complianceScore}%` }}
                                        ></div>
                                    </div>
                                    <p className="mt-2 text-xs text-gray-500">
                                        {analysisResults.complianceScore >= 90 ? 'Highly Compliant' :
                                            analysisResults.complianceScore >= 70 ? 'Partially Compliant' :
                                                'Significant Issues'}
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Summary */}
                        <div className="mt-6 p-4 border rounded-lg">
                            <h3 className="text-md font-medium text-gray-800 mb-2">Summary</h3>
                            <p className="text-gray-700">{analysisResults.summary}</p>
                        </div>
                    </div>

                    {/* Detailed Analysis */}
                    <div className="bg-white rounded-lg shadow-md p-6">
                        <h2 className="text-lg font-semibold text-gray-800 mb-4">Detailed Analysis</h2>

                        {analysisResults.sections.map((section, index) => (
                            <div
                                key={index}
                                className={`mb-6 ${index < analysisResults.sections.length - 1 ? 'pb-6 border-b' : ''}`}
                            >
                                <div className="flex items-center mb-3">
                                    <h3 className="text-md font-medium text-gray-800 mr-3">{section.title}</h3>
                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(section.status)}`}>
                                        {section.status === 'compliant' ? 'Compliant' :
                                            section.status === 'review' ? 'Needs Review' :
                                                'Non-Compliant'}
                                    </span>
                                </div>

                                <div className="overflow-x-auto">
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Item
                                                </th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Value
                                                </th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Status
                                                </th>
                                                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Notes
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {section.items.map((item, itemIndex) => (
                                                <tr key={itemIndex} className={itemIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                        {item.name}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        {item.value}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(item.status)}`}>
                                                            {item.status === 'compliant' ? 'Compliant' :
                                                                item.status === 'review' ? 'Review' :
                                                                    'Non-Compliant'}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        {item.notes || '-'}
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Recommendations */}
                    <div className="bg-white rounded-lg shadow-md p-6">
                        <h2 className="text-lg font-semibold text-gray-800 mb-4">Recommendations</h2>

                        <div className="space-y-4">
                            {analysisResults.recommendations.map((recommendation, index) => (
                                <div key={index} className="flex items-start">
                                    <div className="flex-shrink-0 mt-1">
                                        <FiAlertCircle className={`h-5 w-5 ${index < 2 ? 'text-red-500' :
                                            index < 4 ? 'text-yellow-500' :
                                                'text-blue-500'
                                            }`} />
                                    </div>
                                    <div className="ml-3">
                                        <p className="text-gray-700">{recommendation}</p>
                                    </div>
                                </div>
                            ))}
                        </div>

                        <div className="mt-6 border-t pt-6">
                            <div className="flex justify-between items-center">
                                <h3 className="text-md font-medium text-gray-800">Next Steps</h3>
                                <Link
                                    href={`/compliance/verify?supplierId=${analysisResults.supplierId}`}
                                    className="text-blue-600 hover:text-blue-800 font-medium text-sm flex items-center"
                                >
                                    Verify Supplier Compliance
                                    <FiChevronRight className="ml-1 h-4 w-4" />
                                </Link>
                            </div>

                            <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="border rounded-lg p-4">
                                    <div className="flex items-center mb-2">
                                        <div className="bg-red-100 p-2 rounded-full mr-2">
                                            <FiAlertCircle className="h-4 w-4 text-red-600" />
                                        </div>
                                        <h4 className="font-medium text-gray-800">Address Critical Issues</h4>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        Contact the supplier to address non-compliant items, especially liability and warranty terms.
                                    </p>
                                </div>

                                <div className="border rounded-lg p-4">
                                    <div className="flex items-center mb-2">
                                        <div className="bg-yellow-100 p-2 rounded-full mr-2">
                                            <FiFileText className="h-4 w-4 text-yellow-600" />
                                        </div>
                                        <h4 className="font-medium text-gray-800">Document Updates</h4>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        Request a revised version of the document with the recommended changes.
                                    </p>
                                </div>

                                <div className="border rounded-lg p-4">
                                    <div className="flex items-center mb-2">
                                        <div className="bg-blue-100 p-2 rounded-full mr-2">
                                            <FiCheckCircle className="h-4 w-4 text-blue-600" />
                                        </div>
                                        <h4 className="font-medium text-gray-800">Final Verification</h4>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        Re-analyze the updated document to ensure all compliance issues are resolved.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

// Missing icon components
const FiChevronRight = ({ className }) => (
    <svg
        className={className}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
    </svg>
);

================
File: app/compliance/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import {
    FiShield,
    FiUpload,
    FiFileText,
    FiCheckCircle,
    FiAlertCircle,
    FiClock,
    FiSearch,
    FiFilter,
    FiCalendar,
    FiRefreshCw,
    FiExternalLink
} from 'react-icons/fi';
import { complianceApi } from '../../lib/api';
import { mockComplianceItems } from '@/lib/mockData';

export default function CompliancePage() {
    const [loading, setLoading] = useState(true);
    const [complianceItems, setComplianceItems] = useState([]);
    const [stats, setStats] = useState({
        compliant: 0,
        review: 0,
        nonCompliant: 0,
        expiringSoon: 0
    });

    // Mock data for compliance items
    useEffect(() => {
        const fetchComplianceData = async () => {
            try {
                // In a real app, we would use the API client
                // const response = await complianceApi.getItems();
                // setComplianceItems(response.data);

                // For the hackathon, use mock data
                setTimeout(() => {
                    setComplianceItems(mockComplianceItems);

                    // Calculate statistics
                    const stats = {
                        compliant: mockComplianceItems.filter(item => item.status === 'compliant').length,
                        review: mockComplianceItems.filter(item => item.status === 'review').length,
                        nonCompliant: mockComplianceItems.filter(item => item.status === 'non-compliant').length,
                        expiringSoon: mockComplianceItems.filter(item => {
                            if (!item.expiryDate) return false;

                            const expiryDate = new Date(item.expiryDate);
                            const today = new Date();
                            const days = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));

                            return days > 0 && days <= 60;
                        }).length
                    };

                    setStats(stats);
                    setLoading(false);
                }, 700);
            } catch (error) {
                console.error('Error fetching compliance data:', error);
                setLoading(false);
            }
        };

        fetchComplianceData();
    }, []);

    // Function to determine the status color
    const getStatusColor = (status) => {
        switch (status) {
            case 'compliant':
                return 'bg-green-100 text-green-800';
            case 'review':
                return 'bg-yellow-100 text-yellow-800';
            case 'non-compliant':
                return 'bg-red-100 text-red-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    // Function to determine the status icon
    const getStatusIcon = (status) => {
        switch (status) {
            case 'compliant':
                return <FiCheckCircle className="h-5 w-5 text-green-500" />;
            case 'review':
                return <FiClock className="h-5 w-5 text-yellow-500" />;
            case 'non-compliant':
                return <FiAlertCircle className="h-5 w-5 text-red-500" />;
            default:
                return <FiFileText className="h-5 w-5 text-gray-500" />;
        }
    };

    // Function to format the date display
    const formatDate = (dateString) => {
        if (!dateString) return 'N/A';

        const date = new Date(dateString);
        return date.toLocaleDateString();
    };

    // Function to calculate days until expiry
    const getDaysUntilExpiry = (dateString) => {
        if (!dateString) return null;

        const expiryDate = new Date(dateString);
        const today = new Date();
        const days = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));

        return days;
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Compliance Guardian</h1>
                <div className="flex space-x-3">
                    <Link href="/compliance/documents" className="btn-secondary flex items-center">
                        <FiFileText className="mr-2" />
                        View Documents
                    </Link>
                    <Link href="/compliance/analyze" className="btn-primary flex items-center">
                        <FiUpload className="mr-2" />
                        Analyze Document
                    </Link>
                </div>
            </div>

            {/* Compliance Dashboard */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-4">
                        <h2 className="text-md font-medium text-gray-700">Compliant</h2>
                        <div className="p-2 bg-green-100 rounded-full">
                            <FiCheckCircle className="h-5 w-5 text-green-600" />
                        </div>
                    </div>
                    <div className="flex items-end">
                        <div className="text-3xl font-bold text-gray-800">{stats.compliant}</div>
                        <div className="text-sm text-gray-500 ml-2 mb-1">items</div>
                    </div>
                    <div className="mt-4 text-sm text-green-600">
                        {Math.round((stats.compliant / (stats.compliant + stats.review + stats.nonCompliant)) * 100)}% of total
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-4">
                        <h2 className="text-md font-medium text-gray-700">Under Review</h2>
                        <div className="p-2 bg-yellow-100 rounded-full">
                            <FiClock className="h-5 w-5 text-yellow-600" />
                        </div>
                    </div>
                    <div className="flex items-end">
                        <div className="text-3xl font-bold text-gray-800">{stats.review}</div>
                        <div className="text-sm text-gray-500 ml-2 mb-1">items</div>
                    </div>
                    <div className="mt-4 text-sm text-yellow-600">
                        Requires attention
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-4">
                        <h2 className="text-md font-medium text-gray-700">Non-Compliant</h2>
                        <div className="p-2 bg-red-100 rounded-full">
                            <FiAlertCircle className="h-5 w-5 text-red-600" />
                        </div>
                    </div>
                    <div className="flex items-end">
                        <div className="text-3xl font-bold text-gray-800">{stats.nonCompliant}</div>
                        <div className="text-sm text-gray-500 ml-2 mb-1">items</div>
                    </div>
                    <div className="mt-4 text-sm text-red-600">
                        Urgent action required
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-4">
                        <h2 className="text-md font-medium text-gray-700">Expiring Soon</h2>
                        <div className="p-2 bg-blue-100 rounded-full">
                            <FiCalendar className="h-5 w-5 text-blue-600" />
                        </div>
                    </div>
                    <div className="flex items-end">
                        <div className="text-3xl font-bold text-gray-800">{stats.expiringSoon}</div>
                        <div className="text-sm text-gray-500 ml-2 mb-1">items</div>
                    </div>
                    <div className="mt-4 text-sm text-blue-600">
                        Expiring within 60 days
                    </div>
                </div>
            </div>

            {/* Search and Filter */}
            <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                    <div className="relative w-full md:w-64">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <FiSearch className="h-5 w-5 text-gray-400" />
                        </div>
                        <input
                            type="text"
                            placeholder="Search compliance items..."
                            className="form-input pl-10 w-full"
                        />
                    </div>

                    <div className="flex items-center space-x-4">
                        <div className="relative">
                            <select className="form-select">
                                <option value="">All Suppliers</option>
                                <option value="1">ElectroTech Industries</option>
                                <option value="2">Global Packaging Solutions</option>
                                <option value="3">RawMat Suppliers Inc</option>
                                <option value="4">FastTrack Logistics</option>
                                <option value="5">Quality Service Providers</option>
                            </select>
                        </div>

                        <div className="relative">
                            <select className="form-select">
                                <option value="">All Categories</option>
                                <option value="Quality Management">Quality Management</option>
                                <option value="Environmental">Environmental</option>
                                <option value="Product Safety">Product Safety</option>
                                <option value="Regulatory">Regulatory</option>
                                <option value="Insurance">Insurance</option>
                                <option value="Professional Qualifications">Professional Qualifications</option>
                                <option value="Social Responsibility">Social Responsibility</option>
                            </select>
                        </div>

                        <div className="relative">
                            <select className="form-select">
                                <option value="">All Statuses</option>
                                <option value="compliant">Compliant</option>
                                <option value="review">Under Review</option>
                                <option value="non-compliant">Non-Compliant</option>
                            </select>
                        </div>

                        <button className="p-2 text-gray-500 hover:text-gray-700">
                            <FiRefreshCw className="h-5 w-5" />
                        </button>
                    </div>
                </div>
            </div>

            {/* Compliance Items */}
            <div className="bg-white rounded-lg shadow-md">
                <div className="p-6 border-b border-gray-200">
                    <h2 className="text-lg font-medium text-gray-800">Compliance Items</h2>
                </div>

                {loading ? (
                    <div className="p-6 text-center">
                        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto"></div>
                        <p className="mt-2 text-gray-600">Loading compliance data...</p>
                    </div>
                ) : complianceItems.length === 0 ? (
                    <div className="p-6 text-center">
                        <div className="h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto">
                            <FiFileText className="h-8 w-8 text-gray-400" />
                        </div>
                        <h3 className="mt-2 text-lg font-medium text-gray-900">No compliance items found</h3>
                        <p className="mt-1 text-gray-500">
                            Add documents or check your filter settings
                        </p>
                    </div>
                ) : (
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Status
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Document Type
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Supplier
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Category
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Expiry Date
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Last Checked
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {complianceItems.map((item) => (
                                    <tr key={item.id} className="hover:bg-gray-50">
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <div className="flex items-center">
                                                {getStatusIcon(item.status)}
                                                <span className={`ml-2 px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(item.status)}`}>
                                                    {item.status === 'compliant' ? 'Compliant' :
                                                        item.status === 'review' ? 'Under Review' :
                                                            'Non-Compliant'}
                                                </span>
                                            </div>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            {item.documentType}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <Link href={`/suppliers/${item.supplierId}`} className="hover:text-blue-600 hover:underline">
                                                {item.supplierName}
                                            </Link>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {item.category}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {item.expiryDate ? (
                                                <div>
                                                    {formatDate(item.expiryDate)}
                                                    {getDaysUntilExpiry(item.expiryDate) < 0 ? (
                                                        <div className="text-xs text-red-600 font-medium">
                                                            Expired
                                                        </div>
                                                    ) : getDaysUntilExpiry(item.expiryDate) <= 60 ? (
                                                        <div className="text-xs text-yellow-600 font-medium">
                                                            {getDaysUntilExpiry(item.expiryDate)} days left
                                                        </div>
                                                    ) : null}
                                                </div>
                                            ) : (
                                                <span>N/A</span>
                                            )}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {formatDate(item.lastChecked)}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <Link
                                                href={`/compliance/items/${item.id}`}
                                                className="text-blue-600 hover:text-blue-900 mr-3"
                                            >
                                                View
                                            </Link>
                                            <Link
                                                href={`/compliance/verify?documentId=${item.id}`}
                                                className="text-green-600 hover:text-green-900"
                                            >
                                                Verify
                                            </Link>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>

            {/* Quick Actions */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Link
                    href="/compliance/analyze"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Analyze Document</h3>
                        <div className="bg-blue-100 text-blue-600 p-2 rounded-full">
                            <FiUpload className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">
                        Upload and analyze contracts, certifications, and other documents for compliance.
                    </p>
                </Link>

                <Link
                    href="/compliance/requirements"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Compliance Requirements</h3>
                        <div className="bg-purple-100 text-purple-600 p-2 rounded-full">
                            <FiFileText className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">
                        View regulatory and company requirements for different supplier categories.
                    </p>
                </Link>

                <Link
                    href="/compliance/verify"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Supplier Verification</h3>
                        <div className="bg-green-100 text-green-600 p-2 rounded-full">
                            <FiCheckCircle className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">
                        Verify a supplier's overall compliance status across all requirements.
                    </p>
                </Link>
            </div>

            {/* External Resources */}
            <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-medium text-gray-800 mb-4">Compliance Resources</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <a
                        href="#"
                        className="flex items-center p-3 border rounded-lg hover:bg-gray-50"
                        onClick={(e) => e.preventDefault()}
                    >
                        <div className="bg-gray-100 p-2 rounded-full mr-3">
                            <FiFileText className="h-5 w-5 text-gray-600" />
                        </div>
                        <div>
                            <h4 className="text-sm font-medium">Compliance Policy Templates</h4>
                            <p className="text-xs text-gray-500">Standard templates for key compliance documents</p>
                        </div>
                        <FiExternalLink className="ml-auto h-4 w-4 text-gray-400" />
                    </a>

                    <a
                        href="#"
                        className="flex items-center p-3 border rounded-lg hover:bg-gray-50"
                        onClick={(e) => e.preventDefault()}
                    >
                        <div className="bg-gray-100 p-2 rounded-full mr-3">
                            <FiFileText className="h-5 w-5 text-gray-600" />
                        </div>
                        <div>
                            <h4 className="text-sm font-medium">Regulatory Updates</h4>
                            <p className="text-xs text-gray-500">Latest changes to compliance regulations</p>
                        </div>
                        <FiExternalLink className="ml-auto h-4 w-4 text-gray-400" />
                    </a>

                    <a
                        href="#"
                        className="flex items-center p-3 border rounded-lg hover:bg-gray-50"
                        onClick={(e) => e.preventDefault()}
                    >
                        <div className="bg-gray-100 p-2 rounded-full mr-3">
                            <FiFileText className="h-5 w-5 text-gray-600" />
                        </div>
                        <div>
                            <h4 className="text-sm font-medium">Compliance Training</h4>
                            <p className="text-xs text-gray-500">Training materials for procurement teams</p>
                        </div>
                        <FiExternalLink className="ml-auto h-4 w-4 text-gray-400" />
                    </a>

                    <a
                        href="#"
                        className="flex items-center p-3 border rounded-lg hover:bg-gray-50"
                        onClick={(e) => e.preventDefault()}
                    >
                        <div className="bg-gray-100 p-2 rounded-full mr-3">
                            <FiFileText className="h-5 w-5 text-gray-600" />
                        </div>
                        <div>
                            <h4 className="text-sm font-medium">Industry Best Practices</h4>
                            <p className="text-xs text-gray-500">Compliance guidelines by industry sector</p>
                        </div>
                        <FiExternalLink className="ml-auto h-4 w-4 text-gray-400" />
                    </a>
                </div>
            </div>
        </div>
    );
}

================
File: app/negotiations/dossier/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useSearchParams, useRouter } from 'next/navigation';
import {
    FiArrowLeft,
    FiFileText,
    FiDownload,
    FiSearch,
    FiChevronRight,
    FiCheck,
    FiX,
    FiAlertCircle,
    FiInfo
} from 'react-icons/fi';
import { mockSuppliers } from '@/lib/mockData';

export default function DossierGeneratorPage() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const supplierId = searchParams.get('supplierId');

    const [supplier, setSupplier] = useState(null);
    const [loading, setLoading] = useState(true);
    const [generating, setGenerating] = useState(false);
    const [dossier, setDossier] = useState(null);
    const [categories, setCategories] = useState([]);
    const [formData, setFormData] = useState({
        supplierId: supplierId || '',
        objectives: [],
        products: [],
        targetSavings: '',
        negotiationContext: '',
        additionalNotes: ''
    });

    // Get simplified supplier from mockData.js for dropdown
    const getSimplifiedSuppliers = () => {
        return mockSuppliers.map(supplier => ({
            id: supplier.id,
            name: supplier.name,
            category: supplier.category
        }));
    };

    // Helper to get products from mockData.js by supplier ID
    const getProductsBySupplier = (supplierId) => {
        const supplier = mockSuppliers.find(s => s.id === parseInt(supplierId));
        return supplier && supplier.products ? supplier.products.map(p => p.name) : [];
    };

    // Mock categories for objectives (not in mockData.js)
    const mockCategories = [
        'Cost Reduction',
        'Quality Improvement',
        'Lead Time Reduction',
        'Contract Terms',
        'Payment Terms',
        'Volume Discounts',
        'Service Level Agreement',
        'Technology Access',
        'Exclusivity',
        'Sustainability'
    ];

    // Get supplier details from mockData.js
    const getSupplierById = (id) => {
        return mockSuppliers.find(s => s.id === parseInt(id)) || null;
    };

    // Generate dossier based on selected supplier
    const generateMockDossier = (formData) => {
        const supplierData = getSupplierById(formData.supplierId);

        if (!supplierData) return null;

        return {
            supplierId: formData.supplierId,
            supplierName: supplierData.name,
            generatedDate: new Date().toISOString(),
            sections: [
                {
                    title: 'Executive Summary',
                    content: `This dossier provides a comprehensive analysis of ${supplierData.name} to support upcoming negotiations. The primary objectives are ${formData.objectives.slice(0, 3).join(', ') || 'cost reduction, lead time improvement, and enhanced quality standards'}. Based on market analysis, we recommend targeting a ${formData.targetSavings || '5-8%'} cost reduction while securing improved delivery terms.`
                },
                {
                    title: 'Supplier Background',
                    content: `${supplierData.name} is a ${supplierData.category} provider with a strong market presence. Founded in ${supplierData.foundedYear}, the company is based in ${supplierData.location} and has ${supplierData.employees} employees. ${supplierData.description}`
                },
                {
                    title: 'Market Analysis',
                    content: `Current market conditions for ${supplierData.category} show moderate competition with 4-5 major players. Raw material prices have decreased by 3% in the last quarter, suggesting potential for cost reductions. Industry benchmark pricing indicates that our current rates are approximately 7% above market average, representing a clear opportunity for negotiation.`
                },
                {
                    title: 'Negotiation History',
                    content: `Previous negotiations with ${supplierData.name} resulted in ${supplierData.negotiationHistory ? 'the following outcomes: ' + supplierData.negotiationHistory.map(h => `${h.date}: ${h.outcome} with ${h.savings}% savings`).join(', ') : 'limited success in past years'}. The supplier has historically been resistant to contract term changes but flexible on payment terms. Current payment terms are ${supplierData.paymentTerms}.`
                },
                {
                    title: 'SWOT Analysis',
                    content: `
Strengths:
- ${supplierData.qualityScore > 90 ? 'High quality products with low defect rates' : 'Acceptable quality standards'}
- ${supplierData.reliabilityScore > 85 ? 'Reliable delivery performance' : 'Moderate delivery reliability'} (${supplierData.reliabilityScore}%)
- ${supplierData.communicationScore > 85 ? 'Excellent communication' : 'Adequate communication channels'}

Weaknesses:
- ${supplierData.category === 'Premium' ? 'Higher pricing compared to market average' : 'Standard market pricing'}
- Limited production capacity during peak seasons
- ${supplierData.riskFactors ? supplierData.riskFactors.find(r => r.level === 'medium')?.description || 'Some flexibility constraints' : 'Inflexible on minimum order quantities'}

Opportunities:
- Consolidation of orders to achieve volume discounts
- Introduction of longer-term contracts for price stability
- Joint process improvement initiatives

Threats:
- Alternative suppliers entering the market
- Potential supply chain disruptions in Q4
- ${supplierData.riskFactors ? supplierData.riskFactors.find(r => r.level === 'high')?.description || 'Increasing raw material costs' : 'Increasing raw material costs in certain categories'}
        `
                },
                {
                    title: 'Negotiation Strategy',
                    content: `
Recommended approach:
1. Open with a target of ${formData.targetSavings ? parseInt(formData.targetSavings) + 3 : '10'}% cost reduction based on market benchmarks
2. Prioritize improved payment terms (Net 60 vs current ${supplierData.paymentTerms || 'Net 30'})
3. Request volume-based tiered pricing structure
4. Be prepared to compromise on order scheduling flexibility

Key discussion points:
- Market pricing comparisons from alternative suppliers
- Recent quality improvements reducing our total cost of ownership
- Potential for increased order volumes in the coming year
- Streamlined ordering process reducing administrative costs
        `
                },
                {
                    title: 'Risk Assessment',
                    content: `
Low Risk Areas:
- ${supplierData.qualityScore > 85 ? 'Quality standards are well-established and consistently met' : 'Quality improvements have been noted recently'}
- ${supplierData.riskFactors && supplierData.riskFactors.filter(r => r.level === 'low').length > 0 ? 'Low risk identified in: ' + supplierData.riskFactors.filter(r => r.level === 'low').map(r => r.category).join(', ') : 'Supplier financial stability is strong'}

Medium Risk Areas:
- ${supplierData.riskFactors && supplierData.riskFactors.filter(r => r.level === 'medium').length > 0 ? 'Medium risk identified in: ' + supplierData.riskFactors.filter(r => r.level === 'medium').map(r => r.category).join(', ') : 'Capacity constraints during peak seasons'}
- Potential resistance to significant price reductions

High Risk Areas:
- ${supplierData.riskFactors && supplierData.riskFactors.filter(r => r.level === 'high').length > 0 ? 'High risk identified in: ' + supplierData.riskFactors.filter(r => r.level === 'high').map(r => r.category).join(', ') : 'Limited alternative suppliers for specialized components'}
- Intellectual property protection in collaborative developments
        `
                },
                {
                    title: 'Recommended Targets',
                    content: `
Price: ${formData.targetSavings ? `${formData.targetSavings}% reduction` : '5-8% reduction'} from current levels
Payment Terms: Net 60 (from current ${supplierData.paymentTerms || 'Net 30'})
Lead Time: Reduction of 1 week from current standards
Quality: Maintain current performance with enhanced reporting
Contract Duration: 24 months with quarterly pricing reviews
        `
                }
            ]
        };
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                setTimeout(() => {
                    if (supplierId) {
                        const supplierData = getSupplierById(parseInt(supplierId));
                        setSupplier(supplierData);

                        // Set products for this supplier
                        if (supplierData) {
                            setFormData(prev => ({
                                ...prev,
                                products: getProductsBySupplier(supplierData.id) || []
                            }));
                        }
                    }
                    setCategories(mockCategories);
                    setLoading(false);
                }, 500);
            } catch (error) {
                console.error('Error fetching data:', error);
                setLoading(false);
            }
        };

        fetchData();
    }, [supplierId]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleCheckboxChange = (name, value) => {
        setFormData(prev => {
            const currentValues = [...prev[name]];

            if (currentValues.includes(value)) {
                return {
                    ...prev,
                    [name]: currentValues.filter(v => v !== value)
                };
            } else {
                return {
                    ...prev,
                    [name]: [...currentValues, value]
                };
            }
        });
    };

    const handleSupplierChange = async (e) => {
        const newSupplierId = e.target.value;

        setFormData(prev => ({
            ...prev,
            supplierId: newSupplierId,
            products: [] // Reset products when supplier changes
        }));

        if (newSupplierId) {
            router.push(`/negotiations/dossier?supplierId=${newSupplierId}`);
        } else {
            router.push('/negotiations/dossier');
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            setGenerating(true);

            // For the hackathon, use mock data
            setTimeout(() => {
                const generatedDossier = generateMockDossier(formData);
                setDossier(generatedDossier);
                setGenerating(false);
            }, 1500);
        } catch (error) {
            console.error('Error generating dossier:', error);
            setGenerating(false);
        }
    };

    const downloadDossier = () => {
        // In a real app, this would download a PDF
        alert('Download functionality would be implemented in the final application');
    };

    // If we've generated a dossier, show it
    if (dossier) {
        return (
            <div className="space-y-6">
                <div className="flex justify-between items-center">
                    <div className="flex items-center">
                        <button
                            onClick={() => setDossier(null)}
                            className="p-2 rounded-full hover:bg-gray-100 mr-2"
                        >
                            <FiArrowLeft className="h-5 w-5 text-gray-600" />
                        </button>
                        <h1 className="text-2xl font-bold text-gray-800">
                            Negotiation Dossier: {dossier.supplierName}
                        </h1>
                    </div>
                    <div className="flex space-x-3">
                        <button
                            onClick={downloadDossier}
                            className="btn-primary flex items-center"
                        >
                            <FiDownload className="mr-2" />
                            Download PDF
                        </button>
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex justify-between items-center mb-6">
                        <div>
                            <h2 className="text-xl font-bold text-gray-800">
                                {dossier.supplierName} - Negotiation Analysis
                            </h2>
                            <p className="text-sm text-gray-600">
                                Generated on {new Date(dossier.generatedDate).toLocaleDateString()}
                            </p>
                        </div>
                        <div className="flex items-center text-sm text-gray-600">
                            <FiInfo className="h-4 w-4 mr-1" />
                            AI-generated content. Review for accuracy.
                        </div>
                    </div>

                    <div className="space-y-8">
                        {dossier.sections.map((section, index) => (
                            <div key={index} className={index > 0 ? "pt-6 border-t border-gray-200" : ""}>
                                <h3 className="text-lg font-semibold text-gray-800 mb-3">
                                    {section.title}
                                </h3>
                                <div className="text-gray-700 whitespace-pre-line">
                                    {section.content}
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="mt-8 pt-6 border-t border-gray-200">
                        <div className="flex justify-between items-center">
                            <h3 className="text-lg font-semibold text-gray-800">
                                Next Steps
                            </h3>
                        </div>
                        <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                            <Link
                                href={`/negotiations/strategies?supplierId=${dossier.supplierId}`}
                                className="border rounded-lg p-4 hover:bg-blue-50 transition-colors flex items-center"
                            >
                                <div className="bg-blue-100 text-blue-600 p-3 rounded-full mr-3">
                                    <FiTrendingUp className="h-5 w-5" />
                                </div>
                                <div>
                                    <h4 className="font-medium">Pricing Strategies</h4>
                                    <p className="text-sm text-gray-600">Get detailed pricing recommendations</p>
                                </div>
                                <FiChevronRight className="ml-auto h-5 w-5 text-gray-400" />
                            </Link>

                            <Link
                                href={`/negotiations/messages?supplierId=${dossier.supplierId}`}
                                className="border rounded-lg p-4 hover:bg-blue-50 transition-colors flex items-center"
                            >
                                <div className="bg-green-100 text-green-600 p-3 rounded-full mr-3">
                                    <FiMessageSquare className="h-5 w-5" />
                                </div>
                                <div>
                                    <h4 className="font-medium">Draft Message</h4>
                                    <p className="text-sm text-gray-600">Create a negotiation message</p>
                                </div>
                                <FiChevronRight className="ml-auto h-5 w-5 text-gray-400" />
                            </Link>

                            <Link
                                href={`/negotiations?supplierId=${dossier.supplierId}`}
                                className="border rounded-lg p-4 hover:bg-blue-50 transition-colors flex items-center"
                            >
                                <div className="bg-purple-100 text-purple-600 p-3 rounded-full mr-3">
                                    <FiFileText className="h-5 w-5" />
                                </div>
                                <div>
                                    <h4 className="font-medium">Start Negotiation</h4>
                                    <p className="text-sm text-gray-600">Create a negotiation session</p>
                                </div>
                                <FiChevronRight className="ml-auto h-5 w-5 text-gray-400" />
                            </Link>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <div className="flex items-center">
                    <Link href="/negotiations" className="p-2 rounded-full hover:bg-gray-100 mr-2">
                        <FiArrowLeft className="h-5 w-5 text-gray-600" />
                    </Link>
                    <h1 className="text-2xl font-bold text-gray-800">
                        Generate Negotiation Dossier
                    </h1>
                </div>
            </div>

            {loading ? (
                <div className="bg-white rounded-lg shadow-md p-6 text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                    <p className="mt-4 text-gray-600">Loading...</p>
                </div>
            ) : (
                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="mb-6">
                        <h2 className="text-lg font-semibold text-gray-800 mb-2">
                            Negotiation Dossier Generator
                        </h2>
                        <p className="text-gray-600">
                            Create a comprehensive analysis of a supplier to prepare for negotiations.
                            The AI will generate key insights, competitive analysis, and recommended strategies.
                        </p>
                    </div>

                    <form onSubmit={handleSubmit}>
                        <div className="space-y-6">
                            {/* Supplier Selection */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Select Supplier
                                </label>
                                <div className="relative">
                                    <select
                                        name="supplierId"
                                        value={formData.supplierId}
                                        onChange={handleSupplierChange}
                                        className="form-select"
                                        required
                                    >
                                        <option value="">-- Select a Supplier --</option>
                                        {getSimplifiedSuppliers().map(supplier => (
                                            <option key={supplier.id} value={supplier.id}>
                                                {supplier.name} ({supplier.category})
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>

                            {/* Products */}
                            {formData.supplierId && (
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Products/Services
                                    </label>
                                    <div className="mt-2 space-y-2">
                                        {getProductsBySupplier(formData.supplierId).map((product, index) => (
                                            <div key={index} className="flex items-center">
                                                <input
                                                    id={`product-${index}`}
                                                    type="checkbox"
                                                    className="form-checkbox"
                                                    checked={formData.products.includes(product)}
                                                    onChange={() => handleCheckboxChange('products', product)}
                                                />
                                                <label htmlFor={`product-${index}`} className="ml-2 text-sm text-gray-700">
                                                    {product}
                                                </label>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Negotiation Objectives */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Negotiation Objectives
                                </label>
                                <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-2">
                                    {categories.map((category, index) => (
                                        <div key={index} className="flex items-center">
                                            <input
                                                id={`objective-${index}`}
                                                type="checkbox"
                                                className="form-checkbox"
                                                checked={formData.objectives.includes(category)}
                                                onChange={() => handleCheckboxChange('objectives', category)}
                                            />
                                            <label htmlFor={`objective-${index}`} className="ml-2 text-sm text-gray-700">
                                                {category}
                                            </label>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {/* Target Savings */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Target Savings (%)
                                </label>
                                <input
                                    type="number"
                                    name="targetSavings"
                                    value={formData.targetSavings}
                                    onChange={handleChange}
                                    placeholder="e.g., 5"
                                    className="form-input"
                                    min="0"
                                    max="100"
                                />
                            </div>

                            {/* Negotiation Context */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Negotiation Context
                                </label>
                                <select
                                    name="negotiationContext"
                                    value={formData.negotiationContext}
                                    onChange={handleChange}
                                    className="form-select"
                                >
                                    <option value="">-- Select Context --</option>
                                    <option value="new">New Relationship</option>
                                    <option value="renewal">Contract Renewal</option>
                                    <option value="expansion">Expanding Relationship</option>
                                    <option value="issue">Addressing Issues</option>
                                    <option value="cost">Cost Reduction Initiative</option>
                                </select>
                            </div>

                            {/* Additional Notes */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Additional Notes
                                </label>
                                <textarea
                                    name="additionalNotes"
                                    value={formData.additionalNotes}
                                    onChange={handleChange}
                                    rows={4}
                                    className="form-input"
                                    placeholder="Enter any specific information or requirements..."
                                />
                            </div>

                            {/* Submit Button */}
                            <div className="mt-6">
                                <button
                                    type="submit"
                                    className="btn-primary w-full flex items-center justify-center"
                                    disabled={generating || !formData.supplierId}
                                >
                                    {generating ? (
                                        <>
                                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                            Generating Dossier...
                                        </>
                                    ) : (
                                        <>
                                            <FiFileText className="mr-2" />
                                            Generate Dossier
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            )}
        </div>
    );
}

// Missing icon components
const FiTrendingUp = ({ className }) => (
    <svg
        className={className}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
            d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
        />
    </svg>
);

const FiMessageSquare = ({ className }) => (
    <svg
        className={className}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
            d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
        />
    </svg>
);

================
File: app/negotiations/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useSearchParams } from 'next/navigation';
import {
    FiMessageSquare,
    FiTrendingUp,
    FiFileText,
    FiRefreshCw,
    FiChevronRight,
    FiBriefcase,
    FiClock,
    FiDollarSign,
    FiBarChart2
} from 'react-icons/fi';
import { negotiationApi, supplierApi } from '@/lib/api';
import { mockNegotiations, getSupplierById } from '@/lib/mockData';

export default function NegotiationsPage() {
    const searchParams = useSearchParams();
    const supplierId = searchParams.get('supplierId');

    const [activeNegotiations, setActiveNegotiations] = useState([]);
    const [supplier, setSupplier] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            try {
                // In a real app, we would use the API client
                // if (supplierId) {
                //   const supplierResponse = await supplierApi.getById(supplierId);
                //   setSupplier(supplierResponse.data);
                // }

                // const negotiationsResponse = supplierId 
                //   ? await negotiationApi.getAll({ supplierId }) 
                //   : await negotiationApi.getAll();
                // setActiveNegotiations(negotiationsResponse.data);

                // For the hackathon, use mock data
                setTimeout(() => {
                    if (supplierId) {
                        // Use the getSupplierById helper function from mockData.js
                        const supplierData = getSupplierById(supplierId);

                        if (supplierData) {
                            // If we found the supplier, use its data
                            setSupplier({
                                id: supplierData.id,
                                name: supplierData.name,
                                category: supplierData.category,
                                products: supplierData.products.map(p => p.name),
                                lastNegotiation: supplierData.negotiationHistory?.[0]?.date || new Date().toISOString(),
                                averageDiscount: supplierData.averageDiscount,
                                currentPricing: supplierData.currentPricing,
                                reliability: supplierData.reliabilityScore,
                                communicationScore: supplierData.communicationScore,
                                preferredCommunication: 'Email',
                                paymentTerms: supplierData.paymentTerms,
                                contractExpiry: supplierData.contractExpiry,
                                negotiationHistory: supplierData.negotiationHistory || []
                            });

                            setActiveNegotiations(mockNegotiations.filter(n => n.supplierId === parseInt(supplierId)));
                        } else {
                            // If supplier not found, show empty state
                            setActiveNegotiations([]);
                        }
                    } else {
                        setActiveNegotiations(mockNegotiations);
                    }
                    setLoading(false);
                }, 500);
            } catch (error) {
                console.error('Error fetching data:', error);
                setLoading(false);
            }
        };

        fetchData();
    }, [supplierId]);

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">
                    {supplier ? `Negotiations with ${supplier.name}` : 'Negotiation Companion'}
                </h1>
                <div className="flex space-x-3">
                    <Link href="/suppliers" className="btn-secondary flex items-center">
                        {supplier ? 'Change Supplier' : 'Select Supplier'}
                    </Link>
                    <Link
                        href={supplierId ? `/negotiations/dossier?supplierId=${supplierId}` : '/negotiations/dossier'}
                        className="btn-primary flex items-center"
                    >
                        <FiFileText className="mr-2" />
                        Generate Dossier
                    </Link>
                </div>
            </div>

            {/* Module Overview */}
            {!supplier && (
                <div className="bg-white rounded-lg shadow-md p-6">
                    <h2 className="text-lg font-medium text-gray-800 mb-4">Negotiation Tools</h2>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <Link href="/negotiations/dossier" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors">
                            <div className="flex items-center">
                                <div className="bg-blue-100 text-blue-600 p-3 rounded-full">
                                    <FiFileText className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Negotiation Dossier</h3>
                                    <p className="text-sm text-gray-500">Create comprehensive supplier analysis</p>
                                </div>
                            </div>
                        </Link>

                        <Link href="/negotiations/strategies" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors">
                            <div className="flex items-center">
                                <div className="bg-purple-100 text-purple-600 p-3 rounded-full">
                                    <FiTrendingUp className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Pricing Strategies</h3>
                                    <p className="text-sm text-gray-500">Get AI-powered pricing recommendations</p>
                                </div>
                            </div>
                        </Link>

                        <Link href="/negotiations/messages" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors">
                            <div className="flex items-center">
                                <div className="bg-green-100 text-green-600 p-3 rounded-full">
                                    <FiMessageSquare className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Message Composer</h3>
                                    <p className="text-sm text-gray-500">Draft effective supplier communications</p>
                                </div>
                            </div>
                        </Link>
                    </div>
                </div>
            )}

            {/* Supplier Negotiation Profile */}
            {supplier && (
                <div className="bg-white rounded-lg shadow-md p-6">
                    <h2 className="text-lg font-medium text-gray-800 mb-4">Supplier Negotiation Profile</h2>
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        <div className="lg:col-span-2">
                            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                                <div>
                                    <p className="text-sm text-gray-500">Category</p>
                                    <p className="font-medium">{supplier.category}</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Last Negotiation</p>
                                    <p className="font-medium">{new Date(supplier.lastNegotiation).toLocaleDateString()}</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Avg. Discount</p>
                                    <p className="font-medium">{supplier.averageDiscount}%</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Current Pricing</p>
                                    <p className="font-medium">{supplier.currentPricing}</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Reliability</p>
                                    <p className="font-medium">{supplier.reliability}%</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Communication</p>
                                    <p className="font-medium">{supplier.communicationScore}%</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Payment Terms</p>
                                    <p className="font-medium">{supplier.paymentTerms}</p>
                                </div>
                                <div>
                                    <p className="text-sm text-gray-500">Contract Expiry</p>
                                    <p className="font-medium">{new Date(supplier.contractExpiry).toLocaleDateString()}</p>
                                </div>
                            </div>

                            <div className="mt-6">
                                <p className="text-sm text-gray-500 mb-2">Products</p>
                                <div className="flex flex-wrap gap-2">
                                    {supplier.products.map((product, index) => (
                                        <span
                                            key={index}
                                            className="px-3 py-1 bg-gray-100 rounded-full text-sm text-gray-700"
                                        >
                                            {product}
                                        </span>
                                    ))}
                                </div>
                            </div>
                        </div>

                        <div className="border rounded-lg p-4">
                            <h3 className="text-md font-medium text-gray-800 mb-3">Negotiation History</h3>
                            {supplier.negotiationHistory.map((history, index) => (
                                <div key={index} className={`py-2 ${index < supplier.negotiationHistory.length - 1 ? 'border-b' : ''}`}>
                                    <div className="flex justify-between items-center">
                                        <p className="text-sm">{new Date(history.date).toLocaleDateString()}</p>
                                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${history.outcome === 'Success'
                                            ? 'bg-green-100 text-green-800'
                                            : history.outcome === 'Partial'
                                                ? 'bg-yellow-100 text-yellow-800'
                                                : 'bg-red-100 text-red-800'
                                            }`}>
                                            {history.outcome}
                                        </span>
                                    </div>
                                    <p className="text-sm text-gray-500">Savings achieved: {history.savings}%</p>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}

            {/* Rest of the component remains the same */}
            {/* Active Negotiations */}
            <div className="bg-white rounded-lg shadow-md">
                <div className="p-6 border-b border-gray-200 flex justify-between items-center">
                    <h2 className="text-lg font-medium text-gray-800">
                        {supplier ? 'Current Negotiations' : 'Active Negotiations'}
                    </h2>
                    <button className="text-sm text-gray-600 flex items-center hover:text-gray-900">
                        <FiRefreshCw className="h-4 w-4 mr-1" />
                        Refresh
                    </button>
                </div>

                {loading ? (
                    <div className="p-6 text-center">
                        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto"></div>
                        <p className="mt-2 text-gray-600">Loading negotiations...</p>
                    </div>
                ) : activeNegotiations.length === 0 ? (
                    <div className="p-6 text-center">
                        <div className="h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto">
                            <FiMessageSquare className="h-8 w-8 text-gray-400" />
                        </div>
                        <h3 className="mt-2 text-lg font-medium text-gray-900">No active negotiations</h3>
                        <p className="mt-1 text-gray-500">
                            {supplier
                                ? `Start a new negotiation with ${supplier.name}`
                                : 'Select a supplier to start a negotiation'}
                        </p>
                        <div className="mt-4">
                            {supplier ? (
                                <Link
                                    href={`/negotiations/dossier?supplierId=${supplierId}`}
                                    className="btn-primary inline-flex items-center"
                                >
                                    <FiFileText className="mr-2" />
                                    Generate Dossier
                                </Link>
                            ) : (
                                <Link
                                    href="/suppliers"
                                    className="btn-primary inline-flex items-center"
                                >
                                    Select Supplier
                                </Link>
                            )}
                        </div>
                    </div>
                ) : (
                    <div className="divide-y divide-gray-200">
                        {activeNegotiations.map((negotiation) => (
                            <div key={negotiation.id} className="p-6 hover:bg-gray-50 transition-colors">
                                <div className="flex flex-col md:flex-row md:justify-between md:items-center">
                                    <div className="flex items-start">
                                        <div className={`flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center ${negotiation.priority === 'high'
                                            ? 'bg-red-100 text-red-600'
                                            : negotiation.priority === 'medium'
                                                ? 'bg-yellow-100 text-yellow-600'
                                                : 'bg-green-100 text-green-600'
                                            }`}>
                                            <FiBriefcase className="h-5 w-5" />
                                        </div>
                                        <div className="ml-4">
                                            <div className="flex items-center">
                                                <h3 className="text-lg font-medium text-gray-900">
                                                    {negotiation.supplierName}
                                                </h3>
                                                <span className={`ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${negotiation.status === 'active'
                                                    ? 'bg-green-100 text-green-800'
                                                    : negotiation.status === 'scheduled'
                                                        ? 'bg-blue-100 text-blue-800'
                                                        : 'bg-gray-100 text-gray-800'
                                                    }`}>
                                                    {negotiation.status.charAt(0).toUpperCase() + negotiation.status.slice(1)}
                                                </span>
                                            </div>
                                            <p className="text-sm text-gray-500">
                                                {negotiation.category} • Started {new Date(negotiation.startDate).toLocaleDateString()}
                                            </p>
                                        </div>
                                    </div>
                                    <div className="mt-4 md:mt-0 flex items-center">
                                        <div className="text-sm text-gray-500 mr-4">
                                            <span className="font-medium">
                                                {negotiation.currentStage}
                                            </span>
                                        </div>
                                        <Link
                                            href={`/suppliers/${negotiation.supplierId}`}
                                            className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                        >
                                            View Details
                                            <FiChevronRight className="ml-2 h-4 w-4" />
                                        </Link>
                                    </div>
                                </div>

                                <div className="mt-4 grid grid-cols-1 sm:grid-cols-3 gap-4">
                                    <div className="flex items-center">
                                        <div className="flex-shrink-0 text-gray-400">
                                            <FiClock className="h-5 w-5" />
                                        </div>
                                        <div className="ml-2">
                                            <p className="text-xs text-gray-500">Next Action</p>
                                            <p className="text-sm">{negotiation.nextAction}</p>
                                        </div>
                                    </div>

                                    <div className="flex items-center">
                                        <div className="flex-shrink-0 text-gray-400">
                                            <FiDollarSign className="h-5 w-5" />
                                        </div>
                                        <div className="ml-2">
                                            <p className="text-xs text-gray-500">Target Savings</p>
                                            <p className="text-sm">{negotiation.targetSavings}%</p>
                                        </div>
                                    </div>

                                    <div className="flex items-center">
                                        <div className="flex-shrink-0 text-gray-400">
                                            <FiBarChart2 className="h-5 w-5" />
                                        </div>
                                        <div className="ml-2">
                                            <p className="text-xs text-gray-500">Products</p>
                                            <p className="text-sm">{negotiation.products.join(', ')}</p>
                                        </div>
                                    </div>
                                </div>

                                {negotiation.status === 'completed' && (
                                    <div className="mt-4 pt-4 border-t">
                                        <div className="flex items-center">
                                            <div className={`mr-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${negotiation.outcome === 'Success'
                                                ? 'bg-green-100 text-green-800'
                                                : 'bg-red-100 text-red-800'
                                                }`}>
                                                {negotiation.outcome}
                                            </div>
                                            <p className="text-sm">
                                                Achieved savings of <span className="font-medium">{negotiation.actualSavings}%</span>
                                                {negotiation.targetSavings < negotiation.actualSavings && (
                                                    <span className="text-green-600"> (exceeded target by {(negotiation.actualSavings - negotiation.targetSavings).toFixed(1)}%)</span>
                                                )}
                                            </p>
                                        </div>
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                )}
            </div>

            {/* Quick Links */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Link
                    href="/negotiations/dossier"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Generate Dossier</h3>
                        <div className="bg-blue-100 text-blue-600 p-2 rounded-full">
                            <FiFileText className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">
                        Create a comprehensive analysis of a supplier to prepare for negotiations.
                    </p>
                </Link>

                <Link
                    href="/negotiations/strategies"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Pricing Strategies</h3>
                        <div className="bg-purple-100 text-purple-600 p-2 rounded-full">
                            <FiTrendingUp className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">
                        Get AI-powered pricing recommendations and negotiation strategies.
                    </p>
                </Link>

                <Link
                    href="/negotiations/messages"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Message Composer</h3>
                        <div className="bg-green-100 text-green-600 p-2 rounded-full">
                            <FiMessageSquare className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600">
                        Draft effective supplier communications with AI assistance.
                    </p>
                </Link>
            </div>
        </div>
    );
}

================
File: app/orders/new/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter, useSearchParams } from 'next/navigation';
import {
    FiArrowLeft,
    FiPlus,
    FiTrash2,
    FiSave,
    FiSend,
    FiCalendar,
    FiDollarSign,
    FiAlertCircle,
    FiCheck,
    FiClock,
    FiTruck
} from 'react-icons/fi';
import { mockSuppliers } from '@/lib/mockData';

export default function NewOrderPage() {
    const router = useRouter();
    const searchParams = useSearchParams();
    const initialSupplierId = searchParams.get('supplierId');
    const initialProductId = searchParams.get('productId');

    const [loading, setLoading] = useState(true);
    const [submitting, setSubmitting] = useState(false);
    const [suppliers, setSuppliers] = useState([]);
    const [products, setProducts] = useState([]);
    const [validationErrors, setValidationErrors] = useState({});

    const [formData, setFormData] = useState({
        supplierId: initialSupplierId || '',
        orderDate: new Date().toISOString().slice(0, 10),
        deliveryDate: '',
        paymentTerms: 'Net 30',
        notes: '',
        items: [
            { id: 1, productId: initialProductId || '', name: '', description: '', quantity: 1, unitPrice: 0, total: 0 }
        ],
        subtotal: 0,
        tax: 0,
        shipping: 0,
        total: 0
    });

    // Generate product mapping from mockSuppliers data
    const getProductsBySupplier = () => {
        const productMap = {};

        mockSuppliers.forEach(supplier => {
            if (supplier.products && supplier.products.length > 0) {
                productMap[supplier.id] = supplier.products.map(product => ({
                    id: product.id,
                    name: product.name,
                    description: `${product.category} - Lead time: ${product.leadTime}`,
                    unitPrice: product.unitPrice
                }));
            }
        });

        return productMap;
    };

    // Get simplified supplier list for dropdown
    const getSimplifiedSuppliers = () => {
        return mockSuppliers.map(supplier => ({
            id: supplier.id,
            name: supplier.name,
            category: supplier.category
        }));
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                // For the hackathon, use mock data
                setTimeout(() => {
                    // Use simplified supplier list
                    const simplifiedSuppliers = getSimplifiedSuppliers();
                    setSuppliers(simplifiedSuppliers);

                    // Generate products by supplier mapping
                    const productsBySupplier = getProductsBySupplier();

                    // If a supplier is already selected, fetch their products
                    if (initialSupplierId) {
                        const supplierProducts = productsBySupplier[initialSupplierId] || [];
                        setProducts(supplierProducts);

                        // If a product is specified, add it as the first item
                        if (initialProductId) {
                            const product = supplierProducts.find(p => p.id.toString() === initialProductId);
                            if (product) {
                                setFormData(prev => ({
                                    ...prev,
                                    items: [{
                                        id: 1,
                                        productId: product.id.toString(),
                                        name: product.name,
                                        description: product.description,
                                        quantity: 1,
                                        unitPrice: product.unitPrice,
                                        total: product.unitPrice
                                    }],
                                    subtotal: product.unitPrice,
                                    total: product.unitPrice
                                }));
                            }
                        }
                    }

                    setLoading(false);
                }, 500);
            } catch (error) {
                console.error('Error fetching data:', error);
                setLoading(false);
            }
        };

        fetchData();
    }, [initialSupplierId, initialProductId]);

    const handleSupplierChange = async (e) => {
        const supplierId = e.target.value;

        setFormData(prev => ({
            ...prev,
            supplierId,
            items: [{ id: 1, productId: '', name: '', description: '', quantity: 1, unitPrice: 0, total: 0 }],
            subtotal: 0,
            total: 0
        }));

        if (supplierId) {
            // Generate products by supplier mapping
            const productsBySupplier = getProductsBySupplier();
            setProducts(productsBySupplier[supplierId] || []);
        } else {
            setProducts([]);
        }
    };

    const handleProductChange = (index, e) => {
        const productId = e.target.value;
        const product = products.find(p => p.id.toString() === productId);

        const updatedItems = [...formData.items];

        if (product) {
            updatedItems[index] = {
                ...updatedItems[index],
                productId,
                name: product.name,
                description: product.description,
                unitPrice: product.unitPrice,
                total: product.unitPrice * updatedItems[index].quantity
            };
        } else {
            updatedItems[index] = {
                ...updatedItems[index],
                productId,
                name: '',
                description: '',
                unitPrice: 0,
                total: 0
            };
        }

        const subtotal = updatedItems.reduce((sum, item) => sum + item.total, 0);
        const total = subtotal + formData.tax + formData.shipping;

        setFormData(prev => ({
            ...prev,
            items: updatedItems,
            subtotal,
            total
        }));
    };

    const handleItemChange = (index, field, value) => {
        const updatedItems = [...formData.items];

        if (field === 'quantity') {
            value = parseInt(value) || 0;
            updatedItems[index] = {
                ...updatedItems[index],
                quantity: value,
                total: value * updatedItems[index].unitPrice
            };
        } else if (field === 'unitPrice') {
            value = parseFloat(value) || 0;
            updatedItems[index] = {
                ...updatedItems[index],
                unitPrice: value,
                total: updatedItems[index].quantity * value
            };
        } else {
            updatedItems[index] = {
                ...updatedItems[index],
                [field]: value
            };
        }

        const subtotal = updatedItems.reduce((sum, item) => sum + item.total, 0);
        const total = subtotal + formData.tax + formData.shipping;

        setFormData(prev => ({
            ...prev,
            items: updatedItems,
            subtotal,
            total
        }));
    };

    const handleChange = (e) => {
        const { name, value } = e.target;

        if (name === 'tax' || name === 'shipping') {
            const numValue = parseFloat(value) || 0;
            const total = formData.subtotal + (name === 'tax' ? numValue : formData.tax) +
                (name === 'shipping' ? numValue : formData.shipping);

            setFormData(prev => ({
                ...prev,
                [name]: numValue,
                total
            }));
        } else {
            setFormData(prev => ({
                ...prev,
                [name]: value
            }));
        }
    };

    const addItem = () => {
        const newItemId = formData.items.length > 0
            ? Math.max(...formData.items.map(item => item.id)) + 1
            : 1;

        setFormData(prev => ({
            ...prev,
            items: [
                ...prev.items,
                { id: newItemId, productId: '', name: '', description: '', quantity: 1, unitPrice: 0, total: 0 }
            ]
        }));
    };

    const removeItem = (id) => {
        if (formData.items.length <= 1) {
            return; // Keep at least one item
        }

        const updatedItems = formData.items.filter(item => item.id !== id);
        const subtotal = updatedItems.reduce((sum, item) => sum + item.total, 0);
        const total = subtotal + formData.tax + formData.shipping;

        setFormData(prev => ({
            ...prev,
            items: updatedItems,
            subtotal,
            total
        }));
    };

    const validateForm = () => {
        const errors = {};

        if (!formData.supplierId) {
            errors.supplierId = 'Supplier is required';
        }

        if (!formData.deliveryDate) {
            errors.deliveryDate = 'Delivery date is required';
        }

        let hasItemErrors = false;

        formData.items.forEach((item, index) => {
            if (!item.productId) {
                errors[`item_${index}_productId`] = 'Product is required';
                hasItemErrors = true;
            }

            if (item.quantity <= 0) {
                errors[`item_${index}_quantity`] = 'Quantity must be greater than 0';
                hasItemErrors = true;
            }

            if (item.unitPrice <= 0) {
                errors[`item_${index}_unitPrice`] = 'Unit price must be greater than 0';
                hasItemErrors = true;
            }
        });

        if (hasItemErrors) {
            errors.items = 'One or more items have errors';
        }

        setValidationErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const handleSubmit = async (e, asDraft = false) => {
        e.preventDefault();

        if (!asDraft && !validateForm()) {
            return;
        }

        try {
            setSubmitting(true);

            const orderData = {
                ...formData,
                status: asDraft ? 'draft' : 'processing'
            };

            // In a real app, we would call the API
            // const response = await orderApi.createOrder(orderData);
            // const orderId = response.data.id;

            // For the hackathon, simulate API call
            setTimeout(() => {
                setSubmitting(false);

                // Mock order ID
                const orderId = 'ORD-' + new Date().getFullYear() + '-' + Math.floor(Math.random() * 1000);

                // Redirect to order details page
                router.push(`/orders/${orderId}`);
            }, 1500);
        } catch (error) {
            console.error('Error creating order:', error);
            setSubmitting(false);
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <div className="flex items-center">
                    <Link href="/orders" className="p-2 rounded-full hover:bg-gray-100 mr-2">
                        <FiArrowLeft className="h-5 w-5 text-gray-600" />
                    </Link>
                    <h1 className="text-2xl font-bold text-gray-800">Create New Order</h1>
                </div>
                <div className="flex space-x-3">
                    <button
                        onClick={(e) => handleSubmit(e, true)}
                        className="btn-secondary flex items-center"
                        disabled={submitting}
                    >
                        {submitting && asDraft ? (
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        ) : (
                            <FiSave className="mr-2" />
                        )}
                        Save as Draft
                    </button>
                    <button
                        onClick={(e) => handleSubmit(e, false)}
                        className="btn-primary flex items-center"
                        disabled={submitting}
                    >
                        {submitting && !asDraft ? (
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        ) : (
                            <FiSend className="mr-2" />
                        )}
                        Submit Order
                    </button>
                </div>
            </div>

            {loading ? (
                <div className="bg-white rounded-lg shadow-md p-6 text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                    <p className="mt-4 text-gray-600">Loading order form...</p>
                </div>
            ) : (
                <form className="space-y-6">
                    {/* Order Details Card */}
                    <div className="bg-white rounded-lg shadow-md p-6">
                        <h2 className="text-lg font-medium text-gray-800 mb-4">Order Details</h2>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {/* Supplier Selection */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="supplierId">
                                    Supplier <span className="text-red-500">*</span>
                                </label>
                                <select
                                    id="supplierId"
                                    name="supplierId"
                                    value={formData.supplierId}
                                    onChange={handleSupplierChange}
                                    className={`form-select ${validationErrors.supplierId ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                                >
                                    <option value="">-- Select Supplier --</option>
                                    {suppliers.map(supplier => (
                                        <option key={supplier.id} value={supplier.id}>
                                            {supplier.name} ({supplier.category})
                                        </option>
                                    ))}
                                </select>
                                {validationErrors.supplierId && (
                                    <p className="mt-1 text-sm text-red-600">{validationErrors.supplierId}</p>
                                )}
                            </div>

                            {/* Order Date */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="orderDate">
                                    Order Date
                                </label>
                                <div className="relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <FiCalendar className="h-5 w-5 text-gray-400" />
                                    </div>
                                    <input
                                        type="date"
                                        id="orderDate"
                                        name="orderDate"
                                        value={formData.orderDate}
                                        onChange={handleChange}
                                        className="form-input pl-10"
                                    />
                                </div>
                            </div>

                            {/* Delivery Date */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="deliveryDate">
                                    Required Delivery Date <span className="text-red-500">*</span>
                                </label>
                                <div className="relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <FiCalendar className="h-5 w-5 text-gray-400" />
                                    </div>
                                    <input
                                        type="date"
                                        id="deliveryDate"
                                        name="deliveryDate"
                                        value={formData.deliveryDate}
                                        onChange={handleChange}
                                        className={`form-input pl-10 ${validationErrors.deliveryDate ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                                    />
                                </div>
                                {validationErrors.deliveryDate && (
                                    <p className="mt-1 text-sm text-red-600">{validationErrors.deliveryDate}</p>
                                )}
                            </div>

                            {/* Payment Terms */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="paymentTerms">
                                    Payment Terms
                                </label>
                                <select
                                    id="paymentTerms"
                                    name="paymentTerms"
                                    value={formData.paymentTerms}
                                    onChange={handleChange}
                                    className="form-select"
                                >
                                    <option value="Net 15">Net 15</option>
                                    <option value="Net 30">Net 30</option>
                                    <option value="Net 45">Net 45</option>
                                    <option value="Net 60">Net 60</option>
                                    <option value="Immediate">Immediate</option>
                                </select>
                            </div>
                        </div>

                        {/* Notes */}
                        <div className="mt-6">
                            <label className="block text-sm font-medium text-gray-700 mb-1" htmlFor="notes">
                                Order Notes
                            </label>
                            <textarea
                                id="notes"
                                name="notes"
                                rows={3}
                                value={formData.notes}
                                onChange={handleChange}
                                placeholder="Enter any special requirements or additional information"
                                className="form-input"
                            />
                        </div>
                    </div>

                    {/* Order Items Card */}
                    <div className="bg-white rounded-lg shadow-md p-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-medium text-gray-800">Order Items</h2>
                            <button
                                type="button"
                                onClick={addItem}
                                className="text-sm bg-blue-50 text-blue-600 py-1 px-3 rounded-md border border-blue-200 hover:bg-blue-100 flex items-center"
                            >
                                <FiPlus className="mr-1 h-4 w-4" />
                                Add Item
                            </button>
                        </div>

                        {validationErrors.items && (
                            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-start">
                                <FiAlertCircle className="h-5 w-5 text-red-500 mr-2 mt-0.5" />
                                <p className="text-sm text-red-600">{validationErrors.items}</p>
                            </div>
                        )}

                        {formData.items.length === 0 ? (
                            <div className="text-center py-6 border-2 border-dashed border-gray-300 rounded-lg">
                                <FiShoppingCart className="mx-auto h-12 w-12 text-gray-400" />
                                <h3 className="mt-2 text-sm font-medium text-gray-900">No items added</h3>
                                <p className="mt-1 text-sm text-gray-500">
                                    Start by adding items to your order
                                </p>
                                <button
                                    type="button"
                                    onClick={addItem}
                                    className="mt-4 btn-primary"
                                >
                                    Add First Item
                                </button>
                            </div>
                        ) : (
                            <div className="space-y-4">
                                {formData.items.map((item, index) => (
                                    <div key={item.id} className="border rounded-lg p-4">
                                        <div className="flex justify-between items-start">
                                            <h3 className="text-md font-medium text-gray-800">Item #{index + 1}</h3>
                                            <button
                                                type="button"
                                                onClick={() => removeItem(item.id)}
                                                className="text-red-500 hover:text-red-700"
                                                disabled={formData.items.length <= 1}
                                            >
                                                <FiTrash2 className="h-5 w-5" />
                                            </button>
                                        </div>

                                        <div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-4">
                                            {/* Product Selection */}
                                            <div className="md:col-span-3">
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Product <span className="text-red-500">*</span>
                                                </label>
                                                <select
                                                    value={item.productId}
                                                    onChange={(e) => handleProductChange(index, e)}
                                                    className={`form-select ${validationErrors[`item_${index}_productId`] ? 'border-red-300' : ''}`}
                                                    disabled={!formData.supplierId}
                                                >
                                                    <option value="">-- Select Product --</option>
                                                    {products.map(product => (
                                                        <option key={product.id} value={product.id}>
                                                            {product.name} - ${product.unitPrice}
                                                        </option>
                                                    ))}
                                                </select>
                                                {validationErrors[`item_${index}_productId`] && (
                                                    <p className="mt-1 text-sm text-red-600">{validationErrors[`item_${index}_productId`]}</p>
                                                )}
                                            </div>

                                            {/* Description */}
                                            <div className="md:col-span-3">
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Description
                                                </label>
                                                <input
                                                    type="text"
                                                    value={item.description}
                                                    onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                                                    className="form-input"
                                                    placeholder="Product description"
                                                />
                                            </div>

                                            {/* Quantity */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Quantity <span className="text-red-500">*</span>
                                                </label>
                                                <input
                                                    type="number"
                                                    min="1"
                                                    value={item.quantity}
                                                    onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
                                                    className={`form-input ${validationErrors[`item_${index}_quantity`] ? 'border-red-300' : ''}`}
                                                />
                                                {validationErrors[`item_${index}_quantity`] && (
                                                    <p className="mt-1 text-sm text-red-600">{validationErrors[`item_${index}_quantity`]}</p>
                                                )}
                                            </div>

                                            {/* Unit Price */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Unit Price <span className="text-red-500">*</span>
                                                </label>
                                                <div className="relative">
                                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                        <FiDollarSign className="h-5 w-5 text-gray-400" />
                                                    </div>
                                                    <input
                                                        type="number"
                                                        min="0"
                                                        step="0.01"
                                                        value={item.unitPrice}
                                                        onChange={(e) => handleItemChange(index, 'unitPrice', e.target.value)}
                                                        className={`form-input pl-8 ${validationErrors[`item_${index}_unitPrice`] ? 'border-red-300' : ''}`}
                                                    />
                                                </div>
                                                {validationErrors[`item_${index}_unitPrice`] && (
                                                    <p className="mt-1 text-sm text-red-600">{validationErrors[`item_${index}_unitPrice`]}</p>
                                                )}
                                            </div>

                                            {/* Total */}
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Total
                                                </label>
                                                <div className="relative">
                                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                        <FiDollarSign className="h-5 w-5 text-gray-400" />
                                                    </div>
                                                    <input
                                                        type="text"
                                                        value={item.total.toFixed(2)}
                                                        readOnly
                                                        className="form-input pl-8 bg-gray-50"
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}

                        {/* Order Summary */}
                        <div className="mt-6 border-t pt-6">
                            <div className="flex justify-end">
                                <div className="w-full md:w-1/2 lg:w-1/3">
                                    <div className="flex justify-between py-2">
                                        <span className="text-gray-600">Subtotal:</span>
                                        <span className="font-medium">${formData.subtotal.toFixed(2)}</span>
                                    </div>

                                    <div className="flex justify-between py-2">
                                        <span className="text-gray-600">Tax:</span>
                                        <div className="flex items-center">
                                            <FiDollarSign className="h-4 w-4 text-gray-400 mr-1" />
                                            <input
                                                type="number"
                                                name="tax"
                                                min="0"
                                                step="0.01"
                                                value={formData.tax}
                                                onChange={handleChange}
                                                className="form-input w-20 py-1 text-right"
                                            />
                                        </div>
                                    </div>

                                    <div className="flex justify-between py-2">
                                        <span className="text-gray-600">Shipping:</span>
                                        <div className="flex items-center">
                                            <FiDollarSign className="h-4 w-4 text-gray-400 mr-1" />
                                            <input
                                                type="number"
                                                name="shipping"
                                                min="0"
                                                step="0.01"
                                                value={formData.shipping}
                                                onChange={handleChange}
                                                className="form-input w-20 py-1 text-right"
                                            />
                                        </div>
                                    </div>

                                    <div className="flex justify-between py-2 border-t border-gray-200 font-bold text-lg">
                                        <span>Total:</span>
                                        <span>${formData.total.toFixed(2)}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Form Actions */}
                    <div className="flex justify-end space-x-4">
                        <Link
                            href="/orders"
                            className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                        >
                            Cancel
                        </Link>
                        <button
                            type="button"
                            onClick={(e) => handleSubmit(e, true)}
                            className="px-6 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700"
                            disabled={submitting}
                        >
                            {submitting ? 'Saving...' : 'Save as Draft'}
                        </button>
                        <button
                            type="button"
                            onClick={(e) => handleSubmit(e, false)}
                            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                            disabled={submitting}
                        >
                            {submitting ? 'Submitting...' : 'Submit Order'}
                        </button>
                    </div>
                </form>
            )}
        </div>
    );
}

// Missing icon components
const FiShoppingCart = ({ className }) => (
    <svg
        className={className}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
            d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
        />
    </svg>
);

================
File: app/orders/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import {
    FiShoppingCart,
    FiPlus,
    FiFilter,
    FiSearch,
    FiDownload,
    FiTruck,
    FiClock,
    FiCheck,
    FiAlertCircle,
    FiFileText,
    FiPieChart,
    FiCalendar,
    FiChevronRight
} from 'react-icons/fi';
import { orderApi } from '../../lib/api';
import { mockOrders } from '@/lib/mockData';

export default function OrdersPage() {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [stats, setStats] = useState({
        draft: 0,
        processing: 0,
        shipped: 0,
        delivered: 0,
        total: 0,
        totalValue: 0
    });
    const [filter, setFilter] = useState('all');

    useEffect(() => {
        const fetchOrders = async () => {
            try {
                // In a real app, we would use the API client
                // const response = await orderApi.getAllOrders();
                // setOrders(response.data);

                // For the hackathon, use mock data
                setTimeout(() => {
                    setOrders(mockOrders);

                    // Calculate statistics
                    const stats = {
                        draft: mockOrders.filter(order => order.status === 'draft').length,
                        processing: mockOrders.filter(order => order.status === 'processing').length,
                        shipped: mockOrders.filter(order => order.status === 'shipped').length,
                        delivered: mockOrders.filter(order => order.status === 'delivered').length,
                        total: mockOrders.length,
                        totalValue: mockOrders.reduce((sum, order) => sum + order.total, 0)
                    };

                    setStats(stats);
                    setLoading(false);
                }, 700);
            } catch (error) {
                console.error('Error fetching orders:', error);
                setLoading(false);
            }
        };

        fetchOrders();
    }, []);

    // Filter orders based on selected filter
    const filteredOrders = orders.filter(order => {
        if (filter === 'all') return true;
        return order.status === filter;
    });

    // Function to get status badge styling
    const getStatusBadge = (status) => {
        switch (status) {
            case 'draft':
                return 'bg-gray-100 text-gray-800';
            case 'processing':
                return 'bg-blue-100 text-blue-800';
            case 'shipped':
                return 'bg-yellow-100 text-yellow-800';
            case 'delivered':
                return 'bg-green-100 text-green-800';
            case 'cancelled':
                return 'bg-red-100 text-red-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    // Function to get status icon
    const getStatusIcon = (status) => {
        switch (status) {
            case 'draft':
                return <FiFileText className="h-5 w-5 text-gray-500" />;
            case 'processing':
                return <FiClock className="h-5 w-5 text-blue-500" />;
            case 'shipped':
                return <FiTruck className="h-5 w-5 text-yellow-500" />;
            case 'delivered':
                return <FiCheck className="h-5 w-5 text-green-500" />;
            case 'cancelled':
                return <FiAlertCircle className="h-5 w-5 text-red-500" />;
            default:
                return <FiFileText className="h-5 w-5 text-gray-500" />;
        }
    };

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Order Management</h1>
                <div className="flex space-x-3">
                    <button className="btn-secondary flex items-center">
                        <FiDownload className="mr-2" />
                        Export
                    </button>
                    <Link href="/orders/new" className="btn-primary flex items-center">
                        <FiPlus className="mr-2" />
                        New Order
                    </Link>
                </div>
            </div>

            {/* Order Stats */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6">
                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-2">
                        <h2 className="text-sm font-medium text-gray-500">Total Orders</h2>
                        <div className="p-2 bg-blue-100 rounded-full">
                            <FiShoppingCart className="h-5 w-5 text-blue-600" />
                        </div>
                    </div>
                    <div className="text-3xl font-bold text-gray-800">{stats.total}</div>
                    <div className="mt-1 text-sm text-gray-500">Last 30 days</div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-2">
                        <h2 className="text-sm font-medium text-gray-500">Draft</h2>
                        <div className="p-2 bg-gray-100 rounded-full">
                            <FiFileText className="h-5 w-5 text-gray-600" />
                        </div>
                    </div>
                    <div className="text-3xl font-bold text-gray-800">{stats.draft}</div>
                    <div className="mt-1 text-sm text-gray-500">Awaiting submission</div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-2">
                        <h2 className="text-sm font-medium text-gray-500">Processing</h2>
                        <div className="p-2 bg-blue-100 rounded-full">
                            <FiClock className="h-5 w-5 text-blue-600" />
                        </div>
                    </div>
                    <div className="text-3xl font-bold text-gray-800">{stats.processing}</div>
                    <div className="mt-1 text-sm text-gray-500">In progress</div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-2">
                        <h2 className="text-sm font-medium text-gray-500">Shipped</h2>
                        <div className="p-2 bg-yellow-100 rounded-full">
                            <FiTruck className="h-5 w-5 text-yellow-600" />
                        </div>
                    </div>
                    <div className="text-3xl font-bold text-gray-800">{stats.shipped}</div>
                    <div className="mt-1 text-sm text-gray-500">In transit</div>
                </div>

                <div className="bg-white rounded-lg shadow-md p-6">
                    <div className="flex items-center justify-between mb-2">
                        <h2 className="text-sm font-medium text-gray-500">Delivered</h2>
                        <div className="p-2 bg-green-100 rounded-full">
                            <FiCheck className="h-5 w-5 text-green-600" />
                        </div>
                    </div>
                    <div className="text-3xl font-bold text-gray-800">{stats.delivered}</div>
                    <div className="mt-1 text-sm text-gray-500">Completed</div>
                </div>
            </div>

            {/* Order Value Summary */}
            <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex items-center justify-between mb-4">
                    <h2 className="text-lg font-medium text-gray-800">Order Summary</h2>
                    <div className="flex space-x-2">
                        <button className="px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50">
                            This Month
                        </button>
                        <button className="px-3 py-1.5 text-sm border border-blue-500 bg-blue-50 text-blue-700 rounded-md">
                            Last 30 Days
                        </button>
                        <button className="px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50">
                            Last Quarter
                        </button>
                    </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="border rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                            <h3 className="text-sm font-medium text-gray-500">Total Order Value</h3>
                            <div className="p-2 bg-blue-100 rounded-full">
                                <FiPieChart className="h-4 w-4 text-blue-600" />
                            </div>
                        </div>
                        <div className="text-2xl font-bold text-gray-800">
                            ${stats.totalValue.toLocaleString()}
                        </div>
                        <div className="mt-1 text-sm text-green-600">
                            +12% from previous period
                        </div>
                    </div>

                    <div className="border rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                            <h3 className="text-sm font-medium text-gray-500">Average Order Value</h3>
                            <div className="p-2 bg-purple-100 rounded-full">
                                <FiPieChart className="h-4 w-4 text-purple-600" />
                            </div>
                        </div>
                        <div className="text-2xl font-bold text-gray-800">
                            ${stats.total > 0 ? Math.round(stats.totalValue / stats.total).toLocaleString() : 0}
                        </div>
                        <div className="mt-1 text-sm text-green-600">
                            +5% from previous period
                        </div>
                    </div>

                    <div className="border rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                            <h3 className="text-sm font-medium text-gray-500">Orders Pending Delivery</h3>
                            <div className="p-2 bg-yellow-100 rounded-full">
                                <FiCalendar className="h-4 w-4 text-yellow-600" />
                            </div>
                        </div>
                        <div className="text-2xl font-bold text-gray-800">
                            {stats.processing + stats.shipped}
                        </div>
                        <div className="mt-1 text-sm text-gray-600">
                            Expected within 15 days
                        </div>
                    </div>
                </div>
            </div>

            {/* Orders List */}
            <div className="bg-white rounded-lg shadow-md">
                <div className="p-6 border-b border-gray-200">
                    <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                        <h2 className="text-lg font-medium text-gray-800">Orders</h2>

                        <div className="flex flex-col sm:flex-row gap-4">
                            <div className="relative">
                                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <FiSearch className="h-5 w-5 text-gray-400" />
                                </div>
                                <input
                                    type="text"
                                    placeholder="Search orders..."
                                    className="form-input pl-10 w-full sm:w-64"
                                />
                            </div>

                            <div className="flex space-x-2">
                                <button
                                    className={`px-3 py-1.5 text-sm rounded-md ${filter === 'all'
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    onClick={() => setFilter('all')}
                                >
                                    All
                                </button>
                                <button
                                    className={`px-3 py-1.5 text-sm rounded-md ${filter === 'draft'
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    onClick={() => setFilter('draft')}
                                >
                                    Draft
                                </button>
                                <button
                                    className={`px-3 py-1.5 text-sm rounded-md ${filter === 'processing'
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    onClick={() => setFilter('processing')}
                                >
                                    Processing
                                </button>
                                <button
                                    className={`px-3 py-1.5 text-sm rounded-md ${filter === 'shipped'
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    onClick={() => setFilter('shipped')}
                                >
                                    Shipped
                                </button>
                                <button
                                    className={`px-3 py-1.5 text-sm rounded-md ${filter === 'delivered'
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    onClick={() => setFilter('delivered')}
                                >
                                    Delivered
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {loading ? (
                    <div className="p-6 text-center">
                        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto"></div>
                        <p className="mt-2 text-gray-600">Loading orders...</p>
                    </div>
                ) : filteredOrders.length === 0 ? (
                    <div className="p-6 text-center">
                        <div className="h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto">
                            <FiShoppingCart className="h-8 w-8 text-gray-400" />
                        </div>
                        <h3 className="mt-2 text-lg font-medium text-gray-900">No orders found</h3>
                        <p className="mt-1 text-gray-500">
                            {filter === 'all'
                                ? 'Start by creating a new order'
                                : `No orders with status "${filter}"`}
                        </p>
                        {filter === 'all' && (
                            <div className="mt-4">
                                <Link href="/orders/new" className="btn-primary inline-flex items-center">
                                    <FiPlus className="mr-2" />
                                    Create Order
                                </Link>
                            </div>
                        )}
                    </div>
                ) : (
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Order ID
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Supplier
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Date
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Status
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Total
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Delivery Date
                                    </th>
                                    <th className="px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {filteredOrders.map((order) => (
                                    <tr key={order.id} className="hover:bg-gray-50">
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">
                                            <Link href={`/orders/${order.id}`} className="hover:underline">
                                                {order.id}
                                            </Link>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <Link href={`/suppliers/${order.supplierId}`} className="hover:text-blue-600 hover:underline">
                                                {order.supplierName}
                                            </Link>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {new Date(order.date).toLocaleDateString()}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <div className="flex items-center">
                                                {getStatusIcon(order.status)}
                                                <span className={`ml-2 px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(order.status)}`}>
                                                    {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                                                </span>
                                            </div>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-medium">
                                            ${order.total.toLocaleString()}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {order.deliveryDate ? new Date(order.deliveryDate).toLocaleDateString() : 'N/A'}
                                            {order.status === 'processing' && order.deliveryDate && new Date(order.deliveryDate) < new Date() && (
                                                <span className="ml-2 text-yellow-600 text-xs font-medium">
                                                    Delayed
                                                </span>
                                            )}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <Link
                                                href={`/orders/${order.id}`}
                                                className="text-blue-600 hover:text-blue-900 mr-3"
                                            >
                                                View
                                            </Link>
                                            {order.status === 'draft' && (
                                                <Link
                                                    href={`/orders/${order.id}/edit`}
                                                    className="text-green-600 hover:text-green-900"
                                                >
                                                    Edit
                                                </Link>
                                            )}
                                            {order.status === 'shipped' && (
                                                <Link
                                                    href={`/orders/${order.id}/track`}
                                                    className="text-purple-600 hover:text-purple-900"
                                                >
                                                    Track
                                                </Link>
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>

            {/* Quick Actions */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Link
                    href="/orders/new"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors group"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Create New Order</h3>
                        <div className="bg-blue-100 text-blue-600 p-2 rounded-full group-hover:bg-blue-200">
                            <FiPlus className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600 mb-4">
                        Create a new purchase order for any supplier with custom items and terms.
                    </p>
                    <div className="flex items-center text-blue-600 text-sm font-medium">
                        Start new order
                        <FiChevronRight className="ml-1 h-4 w-4" />
                    </div>
                </Link>

                <Link
                    href="/orders/templates"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors group"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Order Templates</h3>
                        <div className="bg-purple-100 text-purple-600 p-2 rounded-full group-hover:bg-purple-200">
                            <FiFileText className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600 mb-4">
                        Create and manage templates for recurring orders to save time.
                    </p>
                    <div className="flex items-center text-blue-600 text-sm font-medium">
                        View templates
                        <FiChevronRight className="ml-1 h-4 w-4" />
                    </div>
                </Link>

                <Link
                    href="/orders/reports"
                    className="bg-white rounded-lg shadow-md p-6 hover:bg-blue-50 transition-colors group"
                >
                    <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-gray-800">Order Reports</h3>
                        <div className="bg-green-100 text-green-600 p-2 rounded-full group-hover:bg-green-200">
                            <FiPieChart className="h-5 w-5" />
                        </div>
                    </div>
                    <p className="text-sm text-gray-600 mb-4">
                        Generate detailed reports on order history, spending, and supplier performance.
                    </p>
                    <div className="flex items-center text-blue-600 text-sm font-medium">
                        Generate reports
                        <FiChevronRight className="ml-1 h-4 w-4" />
                    </div>
                </Link>
            </div>
        </div>
    );
}

================
File: app/report/page.js
================
/**
"use client";
import { useState, useMemo } from 'react';
// Import the chart components from react-chartjs-2
import { Pie, Bar, Line, Scatter } from 'react-chartjs-2';
// Import chart.js/auto to automatically register all chart components
import 'chart.js/auto';

import { mockSuppliers, mockOrders } from '../../lib/mockData';

export default function Report() {
  // ------------------------------------------
  // 1) RISK DISTRIBUTION (Pie Chart)
  // ------------------------------------------
  const riskCounts = useMemo(() => {
    const counts = { low: 0, medium: 0, high: 0 };
    mockSuppliers.forEach((supplier) => {
      supplier.riskFactors.forEach((risk) => {
        if (counts[risk.level] !== undefined) {
          counts[risk.level] += 1;
        } else {
          counts[risk.level] = 1;
        }
      });
    });
    return counts;
  }, []);

  const pieData = {
    labels: Object.keys(riskCounts),
    datasets: [
      {
        data: Object.values(riskCounts),
        backgroundColor: ['#4caf50', '#ff9800', '#f44336'],
      },
    ],
  };

  // ------------------------------------------
  // 2) AVERAGE ORDER VALUE (Bar Chart)
  // ------------------------------------------
  const supplierOrderData = useMemo(() => {
    const data = {};
    mockOrders.forEach((order) => {
      const supplierId = order.supplierId;
      if (data[supplierId]) {
        data[supplierId].total += order.total;
        data[supplierId].count++;
      } else {
        data[supplierId] = { total: order.total, count: 1 };
      }
    });
    return data;
  }, []);

  const supplierLabels = Object.keys(supplierOrderData).map((id) => {
    const supplier = mockSuppliers.find((s) => s.id === parseInt(id));
    return supplier ? supplier.name : `Supplier ${id}`;
  });

  const avgOrderValues = Object.values(supplierOrderData).map(
    (data) => data.total / data.count
  );

  const barData = {
    labels: supplierLabels,
    datasets: [
      {
        label: 'Average Order Value',
        data: avgOrderValues,
        backgroundColor: '#42a5f5',
      },
    ],
  };

  // ------------------------------------------
  // 3) SUPPLIER PERFORMANCE OVER TIME (Line Chart)
  //    - Dropdown to select which supplier to show
  // ------------------------------------------
  const [selectedSupplierId, setSelectedSupplierId] = useState(mockSuppliers[0].id);

  // Find the selected supplier object
  const selectedSupplier = useMemo(
    () => mockSuppliers.find((s) => s.id === selectedSupplierId),
    [selectedSupplierId]
  );

  // Build line chart data based on the selected supplier's performance history
  const lineData = useMemo(() => {
    if (!selectedSupplier) return { labels: [], datasets: [] };

    return {
      labels: selectedSupplier.performanceHistory.map((item) => item.month),
      datasets: [
        {
          label: 'On-Time Delivery (%)',
          data: selectedSupplier.performanceHistory.map((item) => item.onTimeDelivery),
          borderColor: '#66bb6a',
          fill: false,
        },
        {
          label: 'Quality Compliance (%)',
          data: selectedSupplier.performanceHistory.map((item) => item.qualityCompliance),
          borderColor: '#42a5f5',
          fill: false,
        },
      ],
    };
  }, [selectedSupplier]);

  // Handler for dropdown changes
  const handleSupplierChange = (e) => {
    setSelectedSupplierId(Number(e.target.value));
  };

  // ------------------------------------------
  // 4) PROFIT MARGIN VS. RELIABILITY (Scatter Chart)
  // ------------------------------------------
  const scatterData = {
    datasets: [
      {
        label: 'Profit Margin vs. Reliability',
        data: mockSuppliers.map((supplier) => ({
          x: supplier.reliabilityScore,
          y: supplier.profitMargin,
        })),
        backgroundColor: '#ff7043',
      },
    ],
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Interactive Procurement Report</h1>

        //Chart 1: Risk Distribution
        <div className="mb-8">
        <h2 className="text-xl font-semibold mb-2">Risk Distribution</h2>
        <p className=" text-gray-600">
            This pie chart shows the overall distribution of supplier risks (low, medium, high).
        </p>
        <div style={{ maxWidth: '300px' }}>
            <Pie
            data={pieData}
            options={{ maintainAspectRatio: false }}
            width={300}
            height={300}
            />
        </div>
    </div>


      //Chart 2: Average Order Value
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-2">Average Order Value per Supplier</h2>
        <p className="mb-2 text-gray-600">
          The bar chart illustrates the average order value computed from recent orders for each supplier.
        </p>
        <div className="w-full">
          <Bar data={barData} options={{ maintainAspectRatio: false }} height={400} />
        </div>
      </div>

      // Chart 3: Supplier Performance Over Time 
      <div className="mb-8">
        // Dropdown to select supplier
        <div className="flex items-center mb-4">
          <h2 className="text-xl font-semibold mr-4">Supplier Performance Over Time</h2>
          <select
            className="border border-gray-300 rounded px-2 py-1"
            value={selectedSupplierId}
            onChange={handleSupplierChange}
          >
            {mockSuppliers.map((supplier) => (
              <option key={supplier.id} value={supplier.id}>
                {supplier.name}
              </option>
            ))}
          </select>
        </div>
        <p className="mb-2 text-gray-600">
          The line chart shows trends in on-time delivery and quality compliance for{' '}
          <strong>{selectedSupplier?.name}</strong> over recent months.
        </p>
        <div className="w-full">
          <Line data={lineData} options={{ maintainAspectRatio: false }} height={400} />
        </div>
      </div>

       Chart 4: Profit Margin vs. Reliability Score 
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-2">Profit Margin vs. Reliability Score</h2>
        <p className="mb-2 text-gray-600">
          This scatter chart compares each supplier’s reliability score against its profit margin.
        </p>
        <div className="w-full">
          <Scatter data={scatterData} options={{ maintainAspectRatio: false }} height={400} />
        </div>
      </div>
    </div>
  );
}
*/


"use client";
import { useState, useMemo } from 'react';
// Import the chart components from react-chartjs-2
import { Pie, Bar, Line, Scatter } from 'react-chartjs-2';
// Import chart.js/auto to automatically register all chart components
import 'chart.js/auto';

import { mockSuppliers, mockOrders } from '../../lib/mockData';

export default function Report() {
  // ------------------------------------------
  // 1) RISK DISTRIBUTION (Pie Chart)
  // ------------------------------------------
  const riskCounts = useMemo(() => {
    const counts = { low: 0, medium: 0, high: 0 };
    mockSuppliers.forEach((supplier) => {
      supplier.riskFactors.forEach((risk) => {
        if (counts[risk.level] !== undefined) {
          counts[risk.level] += 1;
        } else {
          counts[risk.level] = 1;
        }
      });
    });
    return counts;
  }, []);

  const pieData = {
    labels: Object.keys(riskCounts),
    datasets: [
      {
        data: Object.values(riskCounts),
        backgroundColor: ['#4caf50', '#ff9800', '#f44336'],
      },
    ],
  };

  // ------------------------------------------
  // 2) AVERAGE ORDER VALUE (Bar Chart)
  // ------------------------------------------
  const supplierOrderData = useMemo(() => {
    const data = {};
    mockOrders.forEach((order) => {
      const supplierId = order.supplierId;
      if (data[supplierId]) {
        data[supplierId].total += order.total;
        data[supplierId].count++;
      } else {
        data[supplierId] = { total: order.total, count: 1 };
      }
    });
    return data;
  }, []);

  const supplierLabels = Object.keys(supplierOrderData).map((id) => {
    const supplier = mockSuppliers.find((s) => s.id === parseInt(id));
    return supplier ? supplier.name : `Supplier ${id}`;
  });

  const avgOrderValues = Object.values(supplierOrderData).map(
    (data) => data.total / data.count
  );

  const barData = {
    labels: supplierLabels,
    datasets: [
      {
        label: 'Average Order Value',
        data: avgOrderValues,
        backgroundColor: '#42a5f5',
      },
    ],
  };

  // ------------------------------------------
  // 3) SUPPLIER PERFORMANCE OVER TIME (Line Chart)
  //    (with dropdown to select supplier)
  // ------------------------------------------
  const [selectedSupplierId, setSelectedSupplierId] = useState(mockSuppliers[0].id);

  const selectedSupplier = useMemo(
    () => mockSuppliers.find((s) => s.id === selectedSupplierId),
    [selectedSupplierId]
  );

  const lineData = useMemo(() => {
    if (!selectedSupplier) return { labels: [], datasets: [] };
    return {
      labels: selectedSupplier.performanceHistory.map((item) => item.month),
      datasets: [
        {
          label: 'On-Time Delivery (%)',
          data: selectedSupplier.performanceHistory.map((item) => item.onTimeDelivery),
          borderColor: '#66bb6a',
          fill: false,
        },
        {
          label: 'Quality Compliance (%)',
          data: selectedSupplier.performanceHistory.map((item) => item.qualityCompliance),
          borderColor: '#42a5f5',
          fill: false,
        },
      ],
    };
  }, [selectedSupplier]);

  const handleSupplierChange = (e) => {
    setSelectedSupplierId(Number(e.target.value));
  };

  // ------------------------------------------
  // 4) RISK MATRIX (Scatter Chart)
  //    - Replaces the old Profit vs. Reliability scatter
  // ------------------------------------------
  // Step A: Map riskFactors to numeric levels
  // ---- Risk Matrix Logic ----
  function computeRiskValue(level) {
    switch (level) {
      case 'low':
        return 1;
      case 'medium':
        return 2;
      case 'high':
        return 3;
      default:
        return 0;
    }
  }

  const riskMatrixData = useMemo(() => {
    return mockSuppliers.map((supplier) => {
      // Average numeric risk across all riskFactors
      const totalRisk = supplier.riskFactors.reduce((sum, rf) => sum + computeRiskValue(rf.level), 0);
      const avgRisk = totalRisk / supplier.riskFactors.length; // x-axis

      // Define impact as annualRevenue / 100000
      const impact = supplier.annualRevenue / 100000; // y-axis

      return {
        x: avgRisk,
        y: impact,
        supplierName: supplier.name,
      };
    });
  }, []);

  const riskMatrixScatterData = {
    datasets: [
      {
        label: 'Risk Matrix',
        data: riskMatrixData,
        backgroundColor: '#ff7043',
      },
    ],
  };

  const riskMatrixOptions = {
    scales: {
      x: {
        title: {
          display: true,
          text: 'Risk Probability (1=Low, 3=High)',
        },
        min: 0,
        max: 3,
      },
      y: {
        title: {
          display: true,
          text: 'Risk Impact (Annual Revenue in 100k)',
        },
        min: 0,
        max: 10, // Adjust if you have bigger annualRevenue
      },
    },
    plugins: {
      tooltip: {
        callbacks: {
          label: function (context) {
            // Show supplier name in the tooltip
            const { x, y, supplierName } = context.raw;
            return `${supplierName}: Probability=${x.toFixed(1)}, Impact=${y.toFixed(1)}`;
          },
        },
      },
    },
    // Maintain or remove aspect ratio as needed
    maintainAspectRatio: false,
  };


  // ------------------------------------------
  // RENDER
  // ------------------------------------------
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Interactive Procurement Report</h1>

        {/* Chart 1: Risk Distribution */}
        <div className="mb-8">
        <h2 className="text-xl font-semibold mb-2">Risk Distribution</h2>
        <p className=" text-gray-600">
            This pie chart shows the overall distribution of supplier risks (low, medium, high).
        </p>
        <div style={{ maxWidth: '300px' }}>
            <Pie
            data={pieData}
            options={{ maintainAspectRatio: false }}
            width={300}
            height={300}
            />
        </div>
    </div>

      {/* Chart 2: Average Order Value */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-2">Average Order Value per Supplier</h2>
        <p className="mb-2 text-gray-600">
          The bar chart illustrates the average order value computed from recent orders for each supplier.
        </p>
        <div className="w-full">
          <Bar data={barData} options={{ maintainAspectRatio: false }} height={400} />
        </div>
      </div>

      {/* Chart 3: Supplier Performance Over Time (with dropdown) */}
      <div className="mb-8">
        <div className="flex items-center mb-4">
          <h2 className="text-xl font-semibold mr-4">Supplier Performance Over Time</h2>
          <select
            className="border border-gray-300 rounded px-2 py-1"
            value={selectedSupplierId}
            onChange={handleSupplierChange}
          >
            {mockSuppliers.map((supplier) => (
              <option key={supplier.id} value={supplier.id}>
                {supplier.name}
              </option>
            ))}
          </select>
        </div>
        <p className="mb-2 text-gray-600">
          The line chart shows trends in on-time delivery and quality compliance for{' '}
          <strong>{selectedSupplier?.name}</strong> over recent months.
        </p>
        <div className="w-full">
          <Line data={lineData} options={{ maintainAspectRatio: false }} height={400} />
        </div>
      </div>

      {/* Chart 4: Risk Matrix */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-2">Risk Matrix</h2>
        <p className="mb-2 text-gray-600">
          This scatter chart places each supplier according to their <em>risk probability</em> (x-axis)
          and <em>risk impact</em> (y-axis).
        </p>
        {/* Fixed-size container for smaller chart */}
        <div style={{ width: '400px', height: '300px' }}>
          <Scatter
            data={riskMatrixScatterData}
            options={riskMatrixOptions}
          />
        </div>
      </div>
    </div>
  );
}

================
File: app/suppliers/[id]/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useParams } from 'next/navigation';
import {
    FiArrowLeft,
    FiStar,
    FiMapPin,
    FiFileText,
    FiClock,
    FiTruck,
    FiDollarSign,
    FiCheckCircle,
    FiAlertCircle,
    FiBarChart2,
    FiMessageSquare,
    FiShield,
    FiPlusCircle,
    FiShoppingCart
} from 'react-icons/fi';
import { supplierApi } from '../../../lib/api';
import { mockSuppliers, getSupplierById } from '@/lib/mockData';

export default function SupplierDetailsPage() {
    const params = useParams();
    const supplierId = params.id;

    const [supplier, setSupplier] = useState(null);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('overview');

    // Mock supplier data
    useEffect(() => {
        const fetchSupplierDetails = async () => {
            try {
                // In a real application, we would use the API client
                // const response = await supplierApi.getById(supplierId);
                // setSupplier(response.data);

                // For the hackathon, use mock data and find the specific supplier by ID
                setTimeout(() => {
                    const supplierData = getSupplierById(supplierId);
                    setSupplier(supplierData);
                    setLoading(false);
                }, 700);
            } catch (error) {
                console.error('Error fetching supplier details:', error);
                setLoading(false);
            }
        };

        fetchSupplierDetails();
    }, [supplierId]);

    if (loading) {
        return (
            <div className="h-full flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                    <p className="mt-4 text-gray-600">Loading supplier details...</p>
                </div>
            </div>
        );
    }

    if (!supplier) {
        return (
            <div className="h-full flex items-center justify-center">
                <div className="text-center">
                    <FiAlertCircle className="h-12 w-12 text-red-500 mx-auto" />
                    <h2 className="mt-2 text-xl font-semibold text-gray-800">Supplier Not Found</h2>
                    <p className="mt-1 text-gray-600">The supplier you're looking for does not exist or has been removed.</p>
                    <Link href="/suppliers" className="mt-4 inline-block btn-primary">
                        Return to Suppliers
                    </Link>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Header with back button and actions */}
            <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
                <div className="flex items-center">
                    <Link href="/suppliers" className="p-2 rounded-full hover:bg-gray-100 mr-2">
                        <FiArrowLeft className="h-5 w-5 text-gray-600" />
                    </Link>
                    <h1 className="text-2xl font-bold text-gray-800">{supplier.name}</h1>
                </div>
                <div className="flex space-x-3">
                    <Link
                        href={`/negotiations?supplierId=${supplier.id}`}
                        className="btn-secondary flex items-center"
                    >
                        <FiMessageSquare className="mr-2" />
                        Negotiate
                    </Link>
                    <Link
                        href={`/orders/new?supplierId=${supplier.id}`}
                        className="btn-primary flex items-center"
                    >
                        <FiShoppingCart className="mr-2" />
                        Create Order
                    </Link>
                </div>
            </div>

            {/* Supplier overview card */}
            <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex flex-col md:flex-row gap-6">
                    {/* Logo/initial and basic info */}
                    <div className="flex items-start">
                        <div className="h-20 w-20 bg-blue-100 rounded-lg flex items-center justify-center text-blue-600 text-2xl font-bold mr-4">
                            {supplier.name.charAt(0)}
                        </div>
                        <div>
                            <h2 className="text-xl font-medium text-gray-800 mb-1">{supplier.name}</h2>
                            <div className="flex items-center text-sm text-gray-600 mb-1">
                                <span className="flex items-center mr-4">
                                    <FiStar className="h-4 w-4 text-yellow-400 mr-1" />
                                    {supplier.rating}
                                </span>
                                <span className="flex items-center">
                                    <FiMapPin className="h-4 w-4 mr-1" />
                                    {supplier.location}
                                </span>
                            </div>
                            <p className="text-sm text-gray-600">{supplier.category} • {supplier.subcategory}</p>
                        </div>
                    </div>

                    {/* Key metrics */}
                    <div className="flex-1">
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className="border rounded-lg p-3">
                                <p className="text-xs text-gray-500 mb-1">Reliability</p>
                                <div className="flex items-center">
                                    <div className="h-2 w-full bg-gray-200 rounded mr-2">
                                        <div
                                            className="h-2 bg-blue-500 rounded"
                                            style={{ width: `${supplier.reliabilityScore}%` }}
                                        ></div>
                                    </div>
                                    <span className="text-sm font-medium">{supplier.reliabilityScore}%</span>
                                </div>
                            </div>

                            <div className="border rounded-lg p-3">
                                <p className="text-xs text-gray-500 mb-1">Quality</p>
                                <div className="flex items-center">
                                    <div className="h-2 w-full bg-gray-200 rounded mr-2">
                                        <div
                                            className="h-2 bg-green-500 rounded"
                                            style={{ width: `${supplier.qualityScore}%` }}
                                        ></div>
                                    </div>
                                    <span className="text-sm font-medium">{supplier.qualityScore}%</span>
                                </div>
                            </div>

                            <div className="border rounded-lg p-3">
                                <p className="text-xs text-gray-500 mb-1">Delivery</p>
                                <div className="flex items-center">
                                    <div className="h-2 w-full bg-gray-200 rounded mr-2">
                                        <div
                                            className="h-2 bg-purple-500 rounded"
                                            style={{ width: `${supplier.deliveryScore}%` }}
                                        ></div>
                                    </div>
                                    <span className="text-sm font-medium">{supplier.deliveryScore}%</span>
                                </div>
                            </div>

                            <div className="border rounded-lg p-3">
                                <p className="text-xs text-gray-500 mb-1">Communication</p>
                                <div className="flex items-center">
                                    <div className="h-2 w-full bg-gray-200 rounded mr-2">
                                        <div
                                            className="h-2 bg-yellow-500 rounded"
                                            style={{ width: `${supplier.communicationScore}%` }}
                                        ></div>
                                    </div>
                                    <span className="text-sm font-medium">{supplier.communicationScore}%</span>
                                </div>
                            </div>
                        </div>

                        <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div>
                                <p className="text-xs text-gray-500">Status</p>
                                <p className={`text-sm font-medium ${supplier.status === 'active' ? 'text-green-600' : 'text-red-600'
                                    }`}>
                                    {supplier.status === 'active' ? 'Active' : 'Inactive'}
                                </p>
                            </div>

                            <div>
                                <p className="text-xs text-gray-500">Compliance</p>
                                <p className={`text-sm font-medium ${supplier.complianceStatus === 'compliant' ? 'text-green-600' :
                                    supplier.complianceStatus === 'review' ? 'text-yellow-600' :
                                        'text-red-600'
                                    }`}>
                                    {supplier.complianceStatus === 'compliant' ? 'Compliant' :
                                        supplier.complianceStatus === 'review' ? 'Under Review' :
                                            'Non-Compliant'}
                                </p>
                            </div>

                            <div>
                                <p className="text-xs text-gray-500">Last Order</p>
                                <p className="text-sm font-medium">
                                    {new Date(supplier.lastOrder).toLocaleDateString()}
                                </p>
                            </div>

                            <div>
                                <p className="text-xs text-gray-500">Founded</p>
                                <p className="text-sm font-medium">{supplier.foundedYear}</p>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Supplier description */}
                <div className="mt-6">
                    <p className="text-gray-700">{supplier.description}</p>
                </div>
            </div>

            {/* Tabs for different sections */}
            <div className="bg-white rounded-lg shadow-md">
                <div className="border-b">
                    <nav className="flex overflow-x-auto">
                        <button
                            className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${activeTab === 'overview'
                                ? 'border-b-2 border-blue-500 text-blue-600'
                                : 'text-gray-500 hover:text-gray-700'
                                }`}
                            onClick={() => setActiveTab('overview')}
                        >
                            Overview
                        </button>
                        <button
                            className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${activeTab === 'performance'
                                ? 'border-b-2 border-blue-500 text-blue-600'
                                : 'text-gray-500 hover:text-gray-700'
                                }`}
                            onClick={() => setActiveTab('performance')}
                        >
                            Performance
                        </button>
                        <button
                            className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${activeTab === 'compliance'
                                ? 'border-b-2 border-blue-500 text-blue-600'
                                : 'text-gray-500 hover:text-gray-700'
                                }`}
                            onClick={() => setActiveTab('compliance')}
                        >
                            Compliance
                        </button>
                        <button
                            className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${activeTab === 'products'
                                ? 'border-b-2 border-blue-500 text-blue-600'
                                : 'text-gray-500 hover:text-gray-700'
                                }`}
                            onClick={() => setActiveTab('products')}
                        >
                            Products
                        </button>
                        <button
                            className={`px-4 py-3 text-sm font-medium whitespace-nowrap ${activeTab === 'orders'
                                ? 'border-b-2 border-blue-500 text-blue-600'
                                : 'text-gray-500 hover:text-gray-700'
                                }`}
                            onClick={() => setActiveTab('orders')}
                        >
                            Orders
                        </button>
                    </nav>
                </div>

                <div className="p-6">
                    {/* Overview tab */}
                    {activeTab === 'overview' && (
                        <div className="space-y-6">
                            {/* Contact information */}
                            <div>
                                <h3 className="text-lg font-medium text-gray-800 mb-4">Contact Information</h3>
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <div>
                                        <p className="text-sm text-gray-600">Website</p>
                                        <a
                                            href={supplier.website}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="text-blue-600 hover:underline"
                                        >
                                            {supplier.website.replace('https://', '')}
                                        </a>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Email</p>
                                        <a
                                            href={`mailto:${supplier.contactEmail}`}
                                            className="text-blue-600 hover:underline"
                                        >
                                            {supplier.contactEmail}
                                        </a>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600">Phone</p>
                                        <a
                                            href={`tel:${supplier.contactPhone}`}
                                            className="text-blue-600 hover:underline"
                                        >
                                            {supplier.contactPhone}
                                        </a>
                                    </div>
                                </div>
                            </div>

                            {/* Risk assessment */}
                            <div>
                                <h3 className="text-lg font-medium text-gray-800 mb-4">Risk Assessment</h3>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    {supplier.riskFactors.map((risk, index) => (
                                        <div key={index} className="border rounded-lg p-4">
                                            <div className="flex items-center justify-between mb-2">
                                                <h4 className="font-medium">{risk.category} Risk</h4>
                                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${risk.level === 'low' ? 'bg-green-100 text-green-800' :
                                                    risk.level === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                                        'bg-red-100 text-red-800'
                                                    }`}>
                                                    {risk.level.charAt(0).toUpperCase() + risk.level.slice(1)}
                                                </span>
                                            </div>
                                            <p className="text-sm text-gray-600">{risk.description}</p>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {/* Key stats */}
                            <div>
                                <h3 className="text-lg font-medium text-gray-800 mb-4">Company Information</h3>
                                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <div className="flex items-center justify-between">
                                            <p className="text-sm text-gray-600">Founded</p>
                                            <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center text-blue-600">
                                                <FiFileText className="h-4 w-4" />
                                            </div>
                                        </div>
                                        <p className="mt-2 text-xl font-semibold">{supplier.foundedYear}</p>
                                    </div>

                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <div className="flex items-center justify-between">
                                            <p className="text-sm text-gray-600">Employees</p>
                                            <div className="h-8 w-8 bg-green-100 rounded-full flex items-center justify-center text-green-600">
                                                <FiUsers className="h-4 w-4" />
                                            </div>
                                        </div>
                                        <p className="mt-2 text-xl font-semibold">{supplier.employees}</p>
                                    </div>

                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <div className="flex items-center justify-between">
                                            <p className="text-sm text-gray-600">Location</p>
                                            <div className="h-8 w-8 bg-purple-100 rounded-full flex items-center justify-center text-purple-600">
                                                <FiMapPin className="h-4 w-4" />
                                            </div>
                                        </div>
                                        <p className="mt-2 text-xl font-semibold">{supplier.location}</p>
                                    </div>

                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <div className="flex items-center justify-between">
                                            <p className="text-sm text-gray-600">Category</p>
                                            <div className="h-8 w-8 bg-yellow-100 rounded-full flex items-center justify-center text-yellow-600">
                                                <FiTag className="h-4 w-4" />
                                            </div>
                                        </div>
                                        <p className="mt-2 text-xl font-semibold">{supplier.category}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Performance tab */}
                    {activeTab === 'performance' && (
                        <div className="space-y-6">
                            <h3 className="text-lg font-medium text-gray-800 mb-4">Performance History</h3>

                            <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead>
                                        <tr>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Month
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                On-Time Delivery
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Quality Compliance
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Cost Variance
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {supplier.performanceHistory.map((period, index) => (
                                            <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                    {period.month}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    <div className="flex items-center">
                                                        <div className="w-16 bg-gray-200 rounded h-2 mr-2">
                                                            <div
                                                                style={{ width: `${period.onTimeDelivery}%` }}
                                                                className="bg-blue-500 h-2 rounded"
                                                            ></div>
                                                        </div>
                                                        <span>{period.onTimeDelivery}%</span>
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    <div className="flex items-center">
                                                        <div className="w-16 bg-gray-200 rounded h-2 mr-2">
                                                            <div
                                                                style={{ width: `${period.qualityCompliance}%` }}
                                                                className="bg-green-500 h-2 rounded"
                                                            ></div>
                                                        </div>
                                                        <span>{period.qualityCompliance}%</span>
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    <span className={
                                                        period.costVariance <= 0
                                                            ? 'text-green-600'
                                                            : 'text-red-600'
                                                    }>
                                                        {period.costVariance > 0 ? '+' : ''}
                                                        {period.costVariance}%
                                                    </span>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            <div className="mt-6">
                                <h3 className="text-lg font-medium text-gray-800 mb-4">Key Performance Indicators</h3>
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                    <div className="bg-white border rounded-lg p-5">
                                        <div className="flex items-center justify-between mb-4">
                                            <h4 className="text-gray-700 font-medium">On-Time Delivery</h4>
                                            <div className="text-blue-600">
                                                <FiClock className="h-5 w-5" />
                                            </div>
                                        </div>
                                        <div className="text-3xl font-bold mb-2">
                                            {supplier.performanceHistory[0].onTimeDelivery}%
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            {supplier.performanceHistory[0].onTimeDelivery > supplier.performanceHistory[1].onTimeDelivery ? (
                                                <span className="text-green-600">
                                                    +{supplier.performanceHistory[0].onTimeDelivery - supplier.performanceHistory[1].onTimeDelivery}% from last month
                                                </span>
                                            ) : (
                                                <span className="text-red-600">
                                                    {supplier.performanceHistory[0].onTimeDelivery - supplier.performanceHistory[1].onTimeDelivery}% from last month
                                                </span>
                                            )}
                                        </div>
                                    </div>

                                    <div className="bg-white border rounded-lg p-5">
                                        <div className="flex items-center justify-between mb-4">
                                            <h4 className="text-gray-700 font-medium">Quality Compliance</h4>
                                            <div className="text-green-600">
                                                <FiCheckCircle className="h-5 w-5" />
                                            </div>
                                        </div>
                                        <div className="text-3xl font-bold mb-2">
                                            {supplier.performanceHistory[0].qualityCompliance}%
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            {supplier.performanceHistory[0].qualityCompliance > supplier.performanceHistory[1].qualityCompliance ? (
                                                <span className="text-green-600">
                                                    +{supplier.performanceHistory[0].qualityCompliance - supplier.performanceHistory[1].qualityCompliance}% from last month
                                                </span>
                                            ) : (
                                                <span className="text-red-600">
                                                    {supplier.performanceHistory[0].qualityCompliance - supplier.performanceHistory[1].qualityCompliance}% from last month
                                                </span>
                                            )}
                                        </div>
                                    </div>

                                    <div className="bg-white border rounded-lg p-5">
                                        <div className="flex items-center justify-between mb-4">
                                            <h4 className="text-gray-700 font-medium">Cost Performance</h4>
                                            <div className="text-purple-600">
                                                <FiDollarSign className="h-5 w-5" />
                                            </div>
                                        </div>
                                        <div className="text-3xl font-bold mb-2">
                                            {supplier.performanceHistory[0].costVariance > 0 ? '+' : ''}
                                            {supplier.performanceHistory[0].costVariance}%
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            {supplier.performanceHistory[0].costVariance <= supplier.performanceHistory[1].costVariance ? (
                                                <span className="text-green-600">
                                                    Improved by {Math.abs(supplier.performanceHistory[0].costVariance - supplier.performanceHistory[1].costVariance)}% from last month
                                                </span>
                                            ) : (
                                                <span className="text-red-600">
                                                    Decreased by {Math.abs(supplier.performanceHistory[0].costVariance - supplier.performanceHistory[1].costVariance)}% from last month
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Compliance tab */}
                    {activeTab === 'compliance' && (
                        <div className="space-y-6">
                            <h3 className="text-lg font-medium text-gray-800 mb-4">Certifications & Compliance</h3>

                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                {supplier.certifications.map((cert, index) => (
                                    <div key={index} className="border rounded-lg p-4">
                                        <div className="flex items-start">
                                            <div className={`mt-1 flex-shrink-0 h-5 w-5 rounded-full ${cert.valid ? 'bg-green-100' : 'bg-red-100'
                                                } flex items-center justify-center`}>
                                                <div className={`h-3 w-3 rounded-full ${cert.valid ? 'bg-green-500' : 'bg-red-500'
                                                    }`}></div>
                                            </div>
                                            <div className="ml-3">
                                                <h4 className="font-medium">{cert.name}</h4>
                                                <p className="text-sm text-gray-600">
                                                    Valid until: {new Date(cert.expirationDate).toLocaleDateString()}
                                                </p>
                                                <div className="mt-2">
                                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${cert.valid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                                        }`}>
                                                        {cert.valid ? 'Active' : 'Expired'}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>

                            <div className="mt-8">
                                <div className="flex items-center justify-between mb-4">
                                    <h3 className="text-lg font-medium text-gray-800">Compliance Actions</h3>
                                    <Link
                                        href={`/compliance/verify?supplierId=${supplier.id}`}
                                        className="btn-primary flex items-center text-sm"
                                    >
                                        <FiShield className="mr-2" />
                                        Verify Compliance
                                    </Link>
                                </div>

                                <div className="border rounded-lg overflow-hidden">
                                    <div className="px-6 py-4 bg-gray-50 border-b">
                                        <p className="text-sm font-medium text-gray-700">
                                            Recent Compliance Checks
                                        </p>
                                    </div>
                                    <div className="p-6 text-center text-gray-600">
                                        <p>No recent compliance checks found.</p>
                                        <p className="text-sm mt-1">
                                            Use the Compliance Guardian to verify this supplier's compliance status.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Products tab */}
                    {activeTab === 'products' && (
                        <div className="space-y-6">
                            <div className="flex justify-between items-center">
                                <h3 className="text-lg font-medium text-gray-800">Products & Services</h3>
                                <button className="text-sm text-blue-600 hover:text-blue-800 font-medium">
                                    Request Catalog
                                </button>
                            </div>

                            <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead>
                                        <tr>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Product Name
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Category
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Lead Time
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Min. Order Qty
                                            </th>
                                            <th className="px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {supplier.products.map((product) => (
                                            <tr key={product.id}>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                    {product.name}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    {product.category}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    {product.leadTime}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    {product.minOrderQty.toLocaleString()}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                    <button
                                                        className="text-blue-600 hover:text-blue-900 mr-3"
                                                    >
                                                        Details
                                                    </button>
                                                    <Link
                                                        href={`/orders/new?supplierId=${supplier.id}&productId=${product.id}`}
                                                        className="text-green-600 hover:text-green-900"
                                                    >
                                                        Order
                                                    </Link>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    )}

                    {/* Orders tab */}
                    {activeTab === 'orders' && (
                        <div className="space-y-6">
                            <div className="flex justify-between items-center">
                                <h3 className="text-lg font-medium text-gray-800">Recent Orders</h3>
                                <Link
                                    href={`/orders/new?supplierId=${supplier.id}`}
                                    className="btn-primary flex items-center text-sm"
                                >
                                    <FiPlusCircle className="mr-2" />
                                    New Order
                                </Link>
                            </div>

                            {supplier.recentOrders.length === 0 ? (
                                <div className="text-center py-8 border rounded-lg">
                                    <FiShoppingCart className="mx-auto h-12 w-12 text-gray-400" />
                                    <h3 className="mt-2 text-sm font-medium text-gray-900">No orders yet</h3>
                                    <p className="mt-1 text-sm text-gray-500">
                                        Get started by creating a new order with this supplier.
                                    </p>
                                </div>
                            ) : (
                                <div className="overflow-x-auto">
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead>
                                            <tr>
                                                <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Order ID
                                                </th>
                                                <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Date
                                                </th>
                                                <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Status
                                                </th>
                                                <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Amount
                                                </th>
                                                <th className="px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Actions
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {supplier.recentOrders.map((order) => (
                                                <tr key={order.id}>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                        {order.id}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        {new Date(order.date).toLocaleDateString()}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${order.status === 'Delivered'
                                                            ? 'bg-green-100 text-green-800'
                                                            : order.status === 'In Transit'
                                                                ? 'bg-blue-100 text-blue-800'
                                                                : order.status === 'Processing'
                                                                    ? 'bg-yellow-100 text-yellow-800'
                                                                    : 'bg-gray-100 text-gray-800'
                                                            }`}>
                                                            {order.status}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        ${order.amount.toLocaleString()}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        <Link
                                                            href={`/orders/${order.id}`}
                                                            className="text-blue-600 hover:text-blue-900"
                                                        >
                                                            View
                                                        </Link>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

// Missing icon components
const FiUsers = ({ className }) => (
    <svg
        className={className}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
            d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"
        />
    </svg>
);

const FiTag = ({ className }) => (
    <svg
        className={className}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
            d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
        />
    </svg>
);

================
File: app/suppliers/page.js
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import {
    FiSearch,
    FiFilter,
    FiPlusCircle,
    FiChevronDown,
    FiChevronUp,
    FiDownload,
    FiStar,
    FiMapPin
} from 'react-icons/fi';
import { supplierApi } from '../../lib/api';
import { mockSuppliers } from '@/lib/mockData';

export default function SuppliersPage() {
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [filtersOpen, setFiltersOpen] = useState(false);
    const [filters, setFilters] = useState({
        category: '',
        location: '',
        rating: '',
        complianceStatus: ''
    });

    // Mock categories and locations for filter
    const categories = ['Electronics', 'Raw Materials', 'Packaging', 'Logistics', 'Services'];
    const locations = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia'];

    // Mock data for suppliers
    useEffect(() => {
        const fetchSuppliers = async () => {
            try {
                // In a real application, we would use the API client
                // const response = await supplierApi.getAll(filters);
                // setSuppliers(response.data);

                // For the hackathon, use mock data
                setTimeout(() => {
                    setSuppliers(mockSuppliers);
                    setLoading(false);
                }, 500);
            } catch (error) {
                console.error('Error fetching suppliers:', error);
                setLoading(false);
            }
        };

        fetchSuppliers();
    }, [filters]);

    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
    };

    const handleFilterChange = (name, value) => {
        setFilters(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const filteredSuppliers = suppliers.filter(supplier => {
        // Filter by search term
        if (searchTerm && !supplier.name.toLowerCase().includes(searchTerm.toLowerCase())) {
            return false;
        }

        // Filter by category
        if (filters.category && supplier.category !== filters.category) {
            return false;
        }

        // Filter by location
        if (filters.location && supplier.location !== filters.location) {
            return false;
        }

        // Filter by rating
        if (filters.rating) {
            const minRating = parseFloat(filters.rating);
            if (supplier.rating < minRating) {
                return false;
            }
        }

        // Filter by compliance status
        if (filters.complianceStatus && supplier.complianceStatus !== filters.complianceStatus) {
            return false;
        }

        return true;
    });

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Supplier Discovery</h1>
                <div className="flex space-x-3">
                    <Link href="/suppliers/new" className="btn-secondary flex items-center">
                        <FiPlusCircle className="mr-2" />
                        Add Supplier
                    </Link>
                </div>
            </div>

            {/* Search and Filters */}
            <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
                    {/* Search input */}
                    <div className="relative w-full lg:w-96">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <FiSearch className="h-5 w-5 text-gray-400" />
                        </div>
                        <input
                            type="text"
                            placeholder="Search suppliers..."
                            className="form-input pl-10 w-full"
                            value={searchTerm}
                            onChange={handleSearchChange}
                        />
                    </div>

                    {/* Filter toggle button */}
                    <button
                        className="flex items-center justify-center text-sm text-gray-700 hover:text-gray-900 focus:outline-none"
                        onClick={() => setFiltersOpen(!filtersOpen)}
                    >
                        <FiFilter className="h-5 w-5 mr-1" />
                        Filters
                        {filtersOpen ? (
                            <FiChevronUp className="h-4 w-4 ml-1" />
                        ) : (
                            <FiChevronDown className="h-4 w-4 ml-1" />
                        )}
                    </button>
                </div>

                {/* Filter options */}
                {filtersOpen && (
                    <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                        {/* Category filter */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Category
                            </label>
                            <select
                                className="form-select"
                                value={filters.category}
                                onChange={(e) => handleFilterChange('category', e.target.value)}
                            >
                                <option value="">All Categories</option>
                                {categories.map((category) => (
                                    <option key={category} value={category}>
                                        {category}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Location filter */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Location
                            </label>
                            <select
                                className="form-select"
                                value={filters.location}
                                onChange={(e) => handleFilterChange('location', e.target.value)}
                            >
                                <option value="">All Locations</option>
                                {locations.map((location) => (
                                    <option key={location} value={location}>
                                        {location}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Rating filter */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Minimum Rating
                            </label>
                            <select
                                className="form-select"
                                value={filters.rating}
                                onChange={(e) => handleFilterChange('rating', e.target.value)}
                            >
                                <option value="">Any Rating</option>
                                <option value="4.5">4.5+ Stars</option>
                                <option value="4">4+ Stars</option>
                                <option value="3.5">3.5+ Stars</option>
                                <option value="3">3+ Stars</option>
                            </select>
                        </div>

                        {/* Compliance Status filter */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Compliance Status
                            </label>
                            <select
                                className="form-select"
                                value={filters.complianceStatus}
                                onChange={(e) => handleFilterChange('complianceStatus', e.target.value)}
                            >
                                <option value="">All Statuses</option>
                                <option value="compliant">Compliant</option>
                                <option value="review">Under Review</option>
                                <option value="non-compliant">Non-Compliant</option>
                            </select>
                        </div>
                    </div>
                )}
            </div>

            {/* Suppliers List */}
            <div className="bg-white rounded-lg shadow-md">
                <div className="p-6 border-b border-gray-200 flex justify-between items-center">
                    <h2 className="text-lg font-medium text-gray-800">
                        Suppliers ({filteredSuppliers.length})
                    </h2>
                    <button className="text-sm text-gray-600 flex items-center hover:text-gray-900">
                        <FiDownload className="h-4 w-4 mr-1" />
                        Export
                    </button>
                </div>

                {loading ? (
                    <div className="p-6 text-center">
                        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto"></div>
                        <p className="mt-2 text-gray-600">Loading suppliers...</p>
                    </div>
                ) : filteredSuppliers.length === 0 ? (
                    <div className="p-6 text-center">
                        <p className="text-gray-600">No suppliers found matching your criteria.</p>
                    </div>
                ) : (
                    <div className="p-6 grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {filteredSuppliers.map((supplier) => (
                            <div key={supplier.id} className="border rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
                                <div className="p-5">
                                    <div className="flex items-start justify-between">
                                        <div className="flex items-center">
                                            <div className="h-12 w-12 bg-gray-200 rounded-full flex items-center justify-center text-gray-600 text-lg font-bold mr-4">
                                                {supplier.name.charAt(0)}
                                            </div>
                                            <div>
                                                <h3 className="text-lg font-medium text-gray-800 mb-1">
                                                    {supplier.name}
                                                </h3>
                                                <div className="flex items-center text-sm text-gray-600">
                                                    <span className="flex items-center mr-4">
                                                        <FiStar className="h-4 w-4 text-yellow-400 mr-1" />
                                                        {supplier.rating}
                                                    </span>
                                                    <span className="flex items-center">
                                                        <FiMapPin className="h-4 w-4 mr-1" />
                                                        {supplier.location}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                        ${supplier.complianceStatus === 'compliant' ? 'bg-green-100 text-green-800' :
                                                    supplier.complianceStatus === 'review' ? 'bg-yellow-100 text-yellow-800' :
                                                        'bg-red-100 text-red-800'}`}>
                                                {supplier.complianceStatus === 'compliant' ? 'Compliant' :
                                                    supplier.complianceStatus === 'review' ? 'Under Review' :
                                                        'Non-Compliant'}
                                            </span>
                                        </div>
                                    </div>

                                    <div className="mt-4">
                                        <div className="grid grid-cols-2 gap-4 text-sm">
                                            <div>
                                                <p className="text-gray-600">Category</p>
                                                <p className="font-medium">{supplier.category}</p>
                                            </div>
                                            <div>
                                                <p className="text-gray-600">Reliability Score</p>
                                                <p className="font-medium">{supplier.reliabilityScore}%</p>
                                            </div>
                                            <div>
                                                <p className="text-gray-600">Status</p>
                                                <p className={`font-medium ${supplier.status === 'active' ? 'text-green-600' : 'text-red-600'}`}>
                                                    {supplier.status === 'active' ? 'Active' : 'Inactive'}
                                                </p>
                                            </div>
                                            <div>
                                                <p className="text-gray-600">Last Order</p>
                                                <p className="font-medium">
                                                    {new Date(supplier.lastOrder).toLocaleDateString()}
                                                </p>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="mt-5 flex justify-end items-center space-x-3">
                                        <Link
                                            href={`/negotiations?supplierId=${supplier.id}`}
                                            className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                                        >
                                            Negotiate
                                        </Link>
                                        <Link
                                            href={`/suppliers/${supplier.id}`}
                                            className="text-sm bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded"
                                        >
                                            View Details
                                        </Link>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            {/* Add Quick Action for New Supplier */}
            <div className="fixed bottom-6 right-6">
                <Link
                    href="/suppliers/new"
                    className="flex items-center justify-center h-14 w-14 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg transition-colors"
                    title="Add New Supplier"
                >
                    <FiPlusCircle className="h-6 w-6" />
                </Link>
            </div>
        </div>
    );
}

================
File: app/globals.css
================
@import "tailwindcss";

:root {
  --primary: #0066cc;
  --primary-dark: #004c99;
  --secondary: #6c757d;
  --success: #28a745;
  --danger: #dc3545;
  --warning: #ffc107;
  --info: #17a2b8;
  --light: #f8f9fa;
  --dark: #343a40;
}

* {
  box-sizing: border-box;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
  font-family:
    "Inter",
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    "Open Sans",
    "Helvetica Neue",
    sans-serif;
}

@layer components {
  .btn-primary {
    @apply bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors;
  }

  .btn-secondary {
    @apply bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded transition-colors;
  }

  .btn-success {
    @apply bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors;
  }

  .btn-danger {
    @apply bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors;
  }

  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }

  .form-input {
    @apply mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md text-sm shadow-sm 
    placeholder-gray-400 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500;
  }

  .form-select {
    @apply mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none 
    focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md;
  }

  .form-checkbox {
    @apply h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded;
  }

  .table-container {
    @apply overflow-x-auto shadow-md rounded-lg;
  }

  .table {
    @apply min-w-full divide-y divide-gray-200;
  }

  .table-header {
    @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }

  .table-cell {
    @apply px-6 py-4 whitespace-nowrap text-sm text-gray-500;
  }

  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .badge-success {
    @apply bg-green-100 text-green-800;
  }

  .badge-warning {
    @apply bg-yellow-100 text-yellow-800;
  }

  .badge-danger {
    @apply bg-red-100 text-red-800;
  }
}

================
File: app/layout.js
================
import './globals.css';
import Sidebar from '../components/layout/Sidebar';
import Navbar from '../components/layout/Navbar';
import Footer from '../components/layout/Footer';

export const metadata = {
    title: 'Tacto - AI-Powered Supply Chain Management',
    description: 'Streamline your supply chain with AI-powered insights',
};

export default function RootLayout({ children }) {
    return (
        <html lang="en">
            <body className="bg-gray-50">
                <div className="flex h-screen overflow-hidden">
                    <Sidebar />
                    <div className="flex-1 flex flex-col overflow-hidden">
                        <Navbar />
                        <main className="flex-1 overflow-y-auto p-4">
                            {children}
                        </main>
                        <Footer />
                    </div>
                </div>
            </body>
        </html>
    );
}

================
File: app/page.js
================
import Link from 'next/link';
import {
    FiUsers,
    FiMessageSquare,
    FiShield,
    FiShoppingCart,
    FiBarChart2,
    FiAlertCircle,
    FiClock,
    FiCheckCircle
} from 'react-icons/fi';

export default function Dashboard() {
    // Mock data for dashboard
    const stats = [
        { name: 'Active Suppliers', value: '342', icon: FiUsers, color: 'bg-blue-500' },
        { name: 'Pending Negotiations', value: '28', icon: FiMessageSquare, color: 'bg-yellow-500' },
        { name: 'Compliance Risks', value: '12', icon: FiAlertCircle, color: 'bg-red-500' },
        { name: 'Orders This Month', value: '156', icon: FiShoppingCart, color: 'bg-green-500' },
    ];

    const activities = [
        { id: 1, action: 'New supplier registered', time: '5 minutes ago', status: 'info' },
        { id: 2, action: 'Purchase order #12345 approved', time: '1 hour ago', status: 'success' },
        { id: 3, action: 'Compliance alert for Supplier XYZ', time: '3 hours ago', status: 'warning' },
        { id: 4, action: 'Negotiation session completed', time: 'Yesterday, 15:30', status: 'info' },
        { id: 5, action: 'Order #54321 delivered', time: 'Yesterday, 10:15', status: 'success' },
    ];

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold text-gray-800">Dashboard</h1>
                <div className="flex space-x-3">
                <Link href="/report" className="btn-primary flex items-center">
                        <FiBarChart2 className="mr-2" />
                        Go to Data Report
                    </Link>
                </div>
            </div>

            {/* Stats Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                {stats.map((stat) => (
                    <div key={stat.name} className="bg-white rounded-lg shadow-md p-6">
                        <div className="flex items-center">
                            <div className={`${stat.color} text-white p-3 rounded-full`}>
                                <stat.icon className="h-6 w-6" />
                            </div>
                            <div className="ml-4">
                                <h2 className="text-sm font-medium text-gray-500">{stat.name}</h2>
                                <p className="text-2xl font-semibold text-gray-800">{stat.value}</p>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {/* Main Content */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Module Overview */}
                <div className="lg:col-span-2 bg-white rounded-lg shadow-md">
                    <div className="p-6 border-b border-gray-200">
                        <h2 className="text-lg font-medium text-gray-800">Module Overview</h2>
                    </div>
                    <div className="p-6 grid grid-cols-1 sm:grid-cols-2 gap-6">
                        {/* Supplier Discovery */}
                        <Link href="/suppliers" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors cursor-pointer">
                            <div className="flex items-center">
                                <div className="bg-blue-100 text-blue-600 p-3 rounded-full">
                                    <FiUsers className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Supplier Discovery</h3>
                                    <p className="text-sm text-gray-500">Find and analyze suppliers</p>
                                </div>
                            </div>
                        </Link>

                        {/* Negotiation Companion */}
                        <Link href="/negotiations" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors cursor-pointer">
                            <div className="flex items-center">
                                <div className="bg-indigo-100 text-indigo-600 p-3 rounded-full">
                                    <FiMessageSquare className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Negotiation Companion</h3>
                                    <p className="text-sm text-gray-500">Optimize your negotiation strategy</p>
                                </div>
                            </div>
                        </Link>

                        {/* Compliance Guardian */}
                        <Link href="/compliance" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors cursor-pointer">
                            <div className="flex items-center">
                                <div className="bg-purple-100 text-purple-600 p-3 rounded-full">
                                    <FiShield className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Compliance Guardian</h3>
                                    <p className="text-sm text-gray-500">Ensure regulatory compliance</p>
                                </div>
                            </div>
                        </Link>

                        {/* Order Agent */}
                        <Link href="/orders" className="border rounded-lg p-5 hover:bg-blue-50 transition-colors cursor-pointer">
                            <div className="flex items-center">
                                <div className="bg-green-100 text-green-600 p-3 rounded-full">
                                    <FiShoppingCart className="h-6 w-6" />
                                </div>
                                <div className="ml-4">
                                    <h3 className="text-md font-medium text-gray-800">Order Agent</h3>
                                    <p className="text-sm text-gray-500">Manage orders efficiently</p>
                                </div>
                            </div>
                        </Link>
                    </div>
                </div>

                {/* Recent Activity */}
                <div className="bg-white rounded-lg shadow-md">
                    <div className="p-6 border-b border-gray-200">
                        <h2 className="text-lg font-medium text-gray-800">Recent Activity</h2>
                    </div>
                    <div className="p-4">
                        <div className="space-y-4">
                            {activities.map((activity) => (
                                <div key={activity.id} className="flex items-start space-x-4">
                                    <div className="flex-shrink-0 mt-1">
                                        {activity.status === 'success' && (
                                            <FiCheckCircle className="h-5 w-5 text-green-500" />
                                        )}
                                        {activity.status === 'warning' && (
                                            <FiAlertCircle className="h-5 w-5 text-yellow-500" />
                                        )}
                                        {activity.status === 'info' && (
                                            <FiClock className="h-5 w-5 text-blue-500" />
                                        )}
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-800">{activity.action}</p>
                                        <p className="text-xs text-gray-500">{activity.time}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                        <div className="mt-6 text-center">
                            <button className="text-sm text-blue-600 font-medium hover:text-blue-800">
                                View All Activity
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-lg shadow-md p-6">
                <h2 className="text-lg font-medium text-gray-800 mb-4">Quick Actions</h2>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <Link
                        href="/suppliers/search"
                        className="flex items-center justify-center p-4 border rounded-md hover:bg-blue-50 transition-colors"
                    >
                        <span className="text-blue-600 mr-2">
                            <FiUsers className="h-5 w-5" />
                        </span>
                        <span className="text-sm font-medium">Find Suppliers</span>
                    </Link>
                    <Link
                        href="/negotiations/messages"
                        className="flex items-center justify-center p-4 border rounded-md hover:bg-blue-50 transition-colors"
                    >
                        <span className="text-indigo-600 mr-2">
                            <FiMessageSquare className="h-5 w-5" />
                        </span>
                        <span className="text-sm font-medium">Draft Message</span>
                    </Link>
                    <Link
                        href="/compliance/analyze"
                        className="flex items-center justify-center p-4 border rounded-md hover:bg-blue-50 transition-colors"
                    >
                        <span className="text-purple-600 mr-2">
                            <FiShield className="h-5 w-5" />
                        </span>
                        <span className="text-sm font-medium">Check Compliance</span>
                    </Link>
                    <Link
                        href="/orders/new"
                        className="flex items-center justify-center p-4 border rounded-md hover:bg-blue-50 transition-colors"
                    >
                        <span className="text-green-600 mr-2">
                            <FiShoppingCart className="h-5 w-5" />
                        </span>
                        <span className="text-sm font-medium">Create Order</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}

================
File: components/layout/Footer.jsx
================
const Footer = () => {
    return (
        <footer className="bg-white border-t border-gray-200 py-3">
            <div className="mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center justify-between text-sm text-gray-500">
                    <div>
                        <p>&copy; {new Date().getFullYear()} Tacto Supply Chain Solutions. All rights reserved.</p>
                    </div>
                    <div className="flex gap-4">
                        <a href="#" className="hover:text-gray-900">Privacy</a>
                        <a href="#" className="hover:text-gray-900">Terms</a>
                        <a href="#" className="hover:text-gray-900">Support</a>
                    </div>
                </div>
            </div>
        </footer>
    );
};

export default Footer;

================
File: components/layout/Navbar.jsx
================
'use client';

import { useState } from 'react';
import {
    FiBell,
    FiSearch,
    FiSettings,
    FiUser
} from 'react-icons/fi';

const Navbar = () => {
    const [searchOpen, setSearchOpen] = useState(false);
    const [notificationsOpen, setNotificationsOpen] = useState(false);
    const [userMenuOpen, setUserMenuOpen] = useState(false);

    // Mock notifications
    const notifications = [
        { id: 1, message: 'New supplier application received', time: '5 min ago' },
        { id: 2, message: 'Order #12345 status changed to Shipped', time: '1 hour ago' },
        { id: 3, message: 'Compliance document expiring in 7 days', time: '3 hours ago' },
    ];

    return (
        <nav className="bg-white shadow-sm border-b border-gray-200">
            <div className="px-4 sm:px-6 lg:px-8">
                <div className="flex justify-between h-16">
                    <div className="flex items-center flex-1">
                        <div className="flex-shrink-0 hidden lg:block">
                            {/* This space is intentionally left empty to align with sidebar */}
                        </div>

                        {/* Page title */}
                        <div className="ml-4 text-xl font-semibold text-gray-800">
                            Tacto Supply Chain Platform
                        </div>
                    </div>

                    {/* Right side buttons */}
                    <div className="ml-4 flex items-center md:ml-6">
                        {/* Notifications dropdown */}
                        <div className="relative ml-3">
                            <button
                                className="p-1 rounded-full text-gray-500 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                onClick={() => setNotificationsOpen(!notificationsOpen)}
                            >
                                <span className="sr-only">View notifications</span>
                                <FiBell className="h-6 w-6" />
                                <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500"></span>
                            </button>

                            {notificationsOpen && (
                                <div className="origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
                                    <div className="py-1" role="menu" aria-orientation="vertical">
                                        <div className="px-4 py-2 border-b border-gray-200">
                                            <h3 className="text-sm font-medium text-gray-700">Notifications</h3>
                                        </div>
                                        <div className="max-h-60 overflow-y-auto">
                                            {notifications.map((notification) => (
                                                <div
                                                    key={notification.id}
                                                    className="px-4 py-3 hover:bg-gray-50 border-b border-gray-100 cursor-pointer"
                                                >
                                                    <p className="text-sm text-gray-800">{notification.message}</p>
                                                    <p className="text-xs text-gray-500 mt-1">{notification.time}</p>
                                                </div>
                                            ))}
                                        </div>
                                        <div className="px-4 py-2 text-center text-xs text-blue-600 font-medium border-t border-gray-200">
                                            View all notifications
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Settings button */}
                        <button
                            className="ml-3 p-1 rounded-full text-gray-500 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                            <span className="sr-only">View settings</span>
                            <FiSettings className="h-6 w-6" />
                        </button>

                        {/* Profile dropdown */}
                        <div className="relative ml-3">
                            <div>
                                <button
                                    className="max-w-xs flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                    onClick={() => setUserMenuOpen(!userMenuOpen)}
                                >
                                    <span className="sr-only">Open user menu</span>
                                    <div className="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center text-white">
                                        <FiUser />
                                    </div>
                                </button>
                            </div>

                            {userMenuOpen && (
                                <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
                                    <div className="py-1" role="menu" aria-orientation="vertical">
                                        <a
                                            href="#"
                                            className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                            role="menuitem"
                                        >
                                            Your Profile
                                        </a>
                                        <a
                                            href="#"
                                            className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                            role="menuitem"
                                        >
                                            Settings
                                        </a>
                                        <a
                                            href="#"
                                            className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                            role="menuitem"
                                        >
                                            Sign out
                                        </a>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    );
};

export default Navbar;

================
File: components/layout/Sidebar.jsx
================
'use client';

import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image'; // Add this import
import { usePathname } from 'next/navigation';
import {
    FiHome,
    FiSearch,
    FiMessageSquare,
    FiShield,
    FiShoppingCart,
    FiMenu,
    FiX
} from 'react-icons/fi';

const Sidebar = () => {
    const [collapsed, setCollapsed] = useState(false);
    const pathname = usePathname();

    const navigation = [
        { name: 'Dashboard', href: '/', icon: FiHome },
        { name: 'Supplier Discovery', href: '/suppliers', icon: FiSearch },
        { name: 'Negotiation Companion', href: '/negotiations', icon: FiMessageSquare },
        { name: 'Compliance Guardian', href: '/compliance', icon: FiShield },
        { name: 'Order Agent', href: '/orders', icon: FiShoppingCart },
    ];

    const toggleSidebar = () => {
        setCollapsed(!collapsed);
    };

    return (
        <>
            {/* Mobile sidebar toggle */}
            <div className="lg:hidden absolute z-50 top-4 left-4">
                <button
                    onClick={toggleSidebar}
                    className="p-2 cursor-pointer rounded-md text-gray-500 hover:text-gray-600 focus:outline-none"
                >
                    {collapsed ? <FiMenu size={24} /> : <FiX size={24} />}
                </button>
            </div>

            {/* Sidebar */}
            <div
                className={`bg-white shadow-lg transition-all duration-300 ${collapsed ? 'w-0 -translate-x-full lg:w-20 lg:translate-x-0' : 'w-64'
                    } lg:relative absolute inset-y-0 left-0 z-40 h-full`}
            >
                {/* Logo */}
                <div className="h-16 flex items-center justify-center border-b">
                    {!collapsed && (
                        <Link href="/" className="flex items-center justify-center">
                            <Image 
                                src="/tacto.png" 
                                alt="Tacto Logo" 
                                width={120} 
                                height={40} 
                                priority 
                            />
                        </Link>
                    )}
                    {collapsed && (
                        <Link href="/" className="flex items-center justify-center">
                            <Image 
                                src="/tacto.png" 
                                alt="Tacto Logo" 
                                width={32} 
                                height={32} 
                                priority 
                            />
                        </Link>
                    )}
                </div>

                {/* Navigation */}
                <nav className="mt-6 px-3">
                    <div className="space-y-3">
                        {navigation.map((item) => {
                            const isActive = pathname === item.href || pathname.startsWith(`${item.href}/`);
                            return (
                                <Link
                                    key={item.name}
                                    href={item.href}
                                    className={`group flex items-center px-4 py-2 text-sm font-medium rounded-md ${isActive
                                        ? 'bg-blue-100 text-blue-700'
                                        : 'text-gray-700 hover:bg-gray-100'
                                        }`}
                                >
                                    <item.icon
                                        className={`mr-3 flex-shrink-0 h-14 w-6 ${isActive ? 'text-blue-700' : 'text-gray-500'
                                            }`}
                                        aria-hidden="true"
                                    />
                                    {!collapsed && <span className='ml-2'>{item.name}</span>}
                                </Link>
                            );
                        })}
                    </div>
                </nav>

                {/* Collapse toggle for desktop */}
                <div className="hidden lg:flex absolute bottom-5 right-5">
                    <button
                        onClick={toggleSidebar}
                        className="p-2 rounded-full bg-gray-200 text-gray-600 hover:bg-gray-300 focus:outline-none"
                    >
                        {collapsed ? <FiMenu size={16} /> : <FiX size={16} />}
                    </button>
                </div>
            </div>

            {/* Backdrop for mobile */}
            {!collapsed && (
                <div
                    className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-30"
                    onClick={toggleSidebar}
                />
            )}
        </>
    );
};

export default Sidebar;

================
File: components/ui/Alert.jsx
================
export const Alert = ({
    title,
    children,
    variant = 'info',
    icon,
    onClose,
    className = '',
}) => {
    const variantStyles = {
        info: 'bg-blue-50 border-blue-200 text-blue-800',
        success: 'bg-green-50 border-green-200 text-green-800',
        warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',
        error: 'bg-red-50 border-red-200 text-red-800',
    };

    return (
        <div className={`p-4 border rounded-md ${variantStyles[variant]} ${className}`}>
            <div className="flex">
                {icon && <div className="flex-shrink-0 mr-3">{icon}</div>}
                <div className="flex-1">
                    {title && <h3 className="text-sm font-medium mb-1">{title}</h3>}
                    <div className="text-sm">{children}</div>
                </div>
                {onClose && (
                    <button
                        type="button"
                        className="ml-auto -mx-1.5 -my-1.5 rounded-md p-1.5 inline-flex text-gray-500 hover:bg-gray-100 focus:outline-none"
                        onClick={onClose}
                    >
                        <span className="sr-only">Dismiss</span>
                        <FiX className="h-5 w-5" />
                    </button>
                )}
            </div>
        </div>
    );
};

================
File: components/ui/Badge.jsx
================
export const Badge = ({
    children,
    variant = 'default',
    size = 'md',
    className = ''
}) => {
    const baseStyles = 'inline-flex items-center font-medium rounded-full';

    const variantStyles = {
        default: 'bg-gray-100 text-gray-800',
        primary: 'bg-blue-100 text-blue-800',
        success: 'bg-green-100 text-green-800',
        warning: 'bg-yellow-100 text-yellow-800',
        danger: 'bg-red-100 text-red-800',
        info: 'bg-indigo-100 text-indigo-800'
    };

    const sizeStyles = {
        sm: 'px-2 py-0.5 text-xs',
        md: 'px-2.5 py-0.5 text-xs',
        lg: 'px-3 py-1 text-sm'
    };

    const badgeClass = `${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${className}`;

    return (
        <span className={badgeClass}>
            {children}
        </span>
    );
};

================
File: components/ui/Button.jsx
================
export const Button = ({
    children,
    variant = 'primary',
    size = 'md',
    className = '',
    disabled = false,
    onClick,
    type = 'button',
    ...props
}) => {
    const baseStyles = 'font-medium rounded-md focus:outline-none transition-colors';

    const variantStyles = {
        primary: 'bg-blue-600 hover:bg-blue-700 text-white',
        secondary: 'bg-gray-600 hover:bg-gray-700 text-white',
        success: 'bg-green-600 hover:bg-green-700 text-white',
        danger: 'bg-red-600 hover:bg-red-700 text-white',
        outline: 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50',
        ghost: 'bg-transparent text-gray-700 hover:bg-gray-100'
    };

    const sizeStyles = {
        sm: 'py-1 px-3 text-sm',
        md: 'py-2 px-4 text-sm',
        lg: 'py-2 px-6 text-base'
    };

    const disabledStyles = disabled
        ? 'opacity-50 cursor-not-allowed'
        : 'cursor-pointer';

    const buttonClass = `${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${disabledStyles} ${className}`;

    return (
        <button
            type={type}
            className={buttonClass}
            disabled={disabled}
            onClick={onClick}
            {...props}
        >
            {children}
        </button>
    );
};

================
File: components/ui/Card.jsx
================
export const Card = ({
    children,
    title,
    subtitle,
    className = '',
    headerActions,
    footer,
    ...props
}) => {
    return (
        <div
            className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}
            {...props}
        >
            {(title || headerActions) && (
                <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                    <div>
                        {title && <h3 className="text-lg font-medium text-gray-800">{title}</h3>}
                        {subtitle && <p className="text-sm text-gray-500 mt-1">{subtitle}</p>}
                    </div>
                    {headerActions && <div>{headerActions}</div>}
                </div>
            )}
            <div className="p-6">
                {children}
            </div>
            {footer && (
                <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
                    {footer}
                </div>
            )}
        </div>
    );
};

================
File: components/ui/Empty.jsx
================
export const Empty = ({
    icon,
    title = 'No data found',
    description = 'There are no items to display.',
    action,
    className = '',
}) => {
    return (
        <div className={`text-center py-8 ${className}`}>
            {icon && <div className="mx-auto">{icon}</div>}
            <h3 className="mt-2 text-sm font-medium text-gray-900">{title}</h3>
            <p className="mt-1 text-sm text-gray-500">{description}</p>
            {action && <div className="mt-6">{action}</div>}
        </div>
    );
};

================
File: components/ui/FileUpload.jsx
================
import { useState } from 'react';
import { FiUpload, FiFileText, FiX } from 'react-icons/fi';

export const FileUpload = ({
    label,
    accept,
    maxSize = 10, // in MB
    onChange,
    error,
    value,
    multiple = false,
    required = false,
    className = '',
}) => {
    const [dragActive, setDragActive] = useState(false);

    const handleDrag = (e) => {
        e.preventDefault();
        e.stopPropagation();

        if (e.type === 'dragenter' || e.type === 'dragover') {
            setDragActive(true);
        } else if (e.type === 'dragleave') {
            setDragActive(false);
        }
    };

    const handleDrop = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);

        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            validateAndProcessFiles(e.dataTransfer.files);
        }
    };

    const handleChange = (e) => {
        if (e.target.files && e.target.files.length > 0) {
            validateAndProcessFiles(e.target.files);
        }
    };

    const validateAndProcessFiles = (files) => {
        const validFiles = Array.from(files).filter(file => {
            // Check file size
            if (file.size > maxSize * 1024 * 1024) {
                console.error(`File ${file.name} exceeds the ${maxSize}MB size limit`);
                return false;
            }

            // If accept parameter is provided, check MIME type
            if (accept && !accept.split(',').some(type => {
                // Handle wildcards like image/*
                if (type.includes('/*')) {
                    const mainType = type.split('/')[0];
                    return file.type.startsWith(`${mainType}/`);
                }
                return file.type === type.trim();
            })) {
                console.error(`File ${file.name} has an invalid type`);
                return false;
            }

            return true;
        });

        if (validFiles.length > 0) {
            onChange(multiple ? validFiles : validFiles[0]);
        }
    };

    const removeFile = () => {
        onChange(multiple ? [] : null);
    };

    return (
        <div className={className}>
            {label && (
                <label className="block text-sm font-medium text-gray-700 mb-1">
                    {label} {required && <span className="text-red-500">*</span>}
                </label>
            )}

            <div
                className={`border-2 border-dashed rounded-lg p-6 ${dragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
                    } ${error ? 'border-red-300' : ''}`}
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
            >
                {!value || (Array.isArray(value) && value.length === 0) ? (
                    <div className="text-center">
                        <FiUpload className="mx-auto h-12 w-12 text-gray-400" />
                        <div className="mt-4 flex text-sm leading-6 text-gray-600 justify-center">
                            <label
                                htmlFor="file-upload"
                                className="relative cursor-pointer rounded-md font-semibold text-blue-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2 hover:text-blue-500"
                            >
                                <span>Upload {multiple ? 'files' : 'a file'}</span>
                                <input
                                    id="file-upload"
                                    name="file-upload"
                                    type="file"
                                    className="sr-only"
                                    onChange={handleChange}
                                    accept={accept}
                                    multiple={multiple}
                                    required={required}
                                />
                            </label>
                            <p className="pl-1">or drag and drop</p>
                        </div>
                        {accept && (
                            <p className="text-xs text-gray-500 mt-1">
                                Allowed file types: {accept.split(',').join(', ')}
                            </p>
                        )}
                        <p className="text-xs text-gray-500 mt-1">
                            Max size: {maxSize}MB
                        </p>
                    </div>
                ) : (
                    <div className="flex items-center justify-center">
                        {Array.isArray(value) ? (
                            <div className="space-y-2 w-full">
                                {value.map((file, index) => (
                                    <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                                        <div className="flex items-center">
                                            <FiFileText className="h-5 w-5 text-blue-500 mr-2" />
                                            <div>
                                                <p className="text-sm font-medium text-gray-900">{file.name}</p>
                                                <p className="text-xs text-gray-500">
                                                    {(file.size / 1024).toFixed(2)} KB
                                                </p>
                                            </div>
                                        </div>
                                        <button
                                            type="button"
                                            onClick={() => {
                                                const newFiles = [...value];
                                                newFiles.splice(index, 1);
                                                onChange(newFiles);
                                            }}
                                            className="p-1 rounded-full text-gray-500 hover:bg-gray-200"
                                        >
                                            <FiX className="h-4 w-4" />
                                        </button>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="flex items-center p-3 bg-gray-50 rounded-lg w-full">
                                <FiFileText className="h-10 w-10 text-blue-500 mr-3" />
                                <div className="flex-1">
                                    <p className="text-sm font-medium text-gray-900">{value.name}</p>
                                    <p className="text-xs text-gray-500">
                                        {(value.size / 1024).toFixed(2)} KB • {value.type || 'Unknown type'}
                                    </p>
                                </div>
                                <button
                                    type="button"
                                    onClick={removeFile}
                                    className="p-1 rounded-full text-gray-500 hover:bg-gray-200"
                                >
                                    <FiX className="h-5 w-5" />
                                </button>
                            </div>
                        )}
                    </div>
                )}
            </div>

            {error && (
                <p className="mt-1 text-sm text-red-600">{error}</p>
            )}
        </div>
    );
};

================
File: components/ui/Input.jsx
================
export const Input = ({
    label,
    name,
    type = 'text',
    placeholder,
    value,
    onChange,
    error,
    required = false,
    className = '',
    leftIcon,
    rightIcon,
    ...props
}) => {
    const baseInputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50";
    const errorInputClass = "border-red-300 focus:border-red-500 focus:ring-red-200";

    const inputClass = `${baseInputClass} ${error ? errorInputClass : ''} ${leftIcon ? 'pl-10' : ''
        } ${rightIcon ? 'pr-10' : ''} ${className}`;

    return (
        <div>
            {label && (
                <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">
                    {label} {required && <span className="text-red-500">*</span>}
                </label>
            )}
            <div className="relative">
                {leftIcon && (
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        {leftIcon}
                    </div>
                )}
                <input
                    type={type}
                    id={name}
                    name={name}
                    placeholder={placeholder}
                    value={value}
                    onChange={onChange}
                    className={inputClass}
                    required={required}
                    {...props}
                />
                {rightIcon && (
                    <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                        {rightIcon}
                    </div>
                )}
            </div>
            {error && (
                <p className="mt-1 text-sm text-red-600">{error}</p>
            )}
        </div>
    );
};

================
File: components/ui/Modal.jsx
================
import { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { FiX } from 'react-icons/fi';

export const Modal = ({
    isOpen,
    onClose,
    title,
    children,
    footer,
    size = 'md',
    className = '',
}) => {
    const modalRef = useRef(null);

    useEffect(() => {
        const handleEsc = (event) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                onClose();
            }
        };

        if (isOpen) {
            document.addEventListener('keydown', handleEsc);
            document.addEventListener('mousedown', handleClickOutside);
            document.body.style.overflow = 'hidden';
        }

        return () => {
            document.removeEventListener('keydown', handleEsc);
            document.removeEventListener('mousedown', handleClickOutside);
            document.body.style.overflow = 'auto';
        };
    }, [isOpen, onClose]);

    const sizeClasses = {
        sm: 'max-w-md',
        md: 'max-w-lg',
        lg: 'max-w-2xl',
        xl: 'max-w-4xl',
        full: 'max-w-full mx-4',
    };

    if (!isOpen) return null;

    const content = (
        <div className="fixed inset-0 z-50 overflow-y-auto">
            <div className="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
                <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
                <span className="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>
                <div
                    ref={modalRef}
                    className={`inline-block transform rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:align-middle ${sizeClasses[size]
                        } ${className}`}
                >
                    {title && (
                        <div className="border-b border-gray-200 px-6 py-4">
                            <div className="flex items-center justify-between">
                                <h3 className="text-lg font-medium text-gray-900">{title}</h3>
                                <button
                                    type="button"
                                    className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none"
                                    onClick={onClose}
                                >
                                    <span className="sr-only">Close</span>
                                    <FiX className="h-6 w-6" />
                                </button>
                            </div>
                        </div>
                    )}
                    <div className="px-6 py-4">{children}</div>
                    {footer && (
                        <div className="border-t border-gray-200 px-6 py-4 bg-gray-50">{footer}</div>
                    )}
                </div>
            </div>
        </div>
    );

    return createPortal(content, document.body);
};

================
File: components/ui/Select.jsx
================
export const Select = ({
    label,
    name,
    options,
    value,
    onChange,
    placeholder = "Select an option",
    error,
    required = false,
    className = '',
    ...props
}) => {
    const baseSelectClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50";
    const errorSelectClass = "border-red-300 focus:border-red-500 focus:ring-red-200";

    const selectClass = `${baseSelectClass} ${error ? errorSelectClass : ''} ${className}`;

    return (
        <div>
            {label && (
                <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">
                    {label} {required && <span className="text-red-500">*</span>}
                </label>
            )}
            <select
                id={name}
                name={name}
                value={value}
                onChange={onChange}
                className={selectClass}
                required={required}
                {...props}
            >
                {placeholder && (
                    <option value="">{placeholder}</option>
                )}
                {options.map((option) => (
                    <option key={option.value} value={option.value}>
                        {option.label}
                    </option>
                ))}
            </select>
            {error && (
                <p className="mt-1 text-sm text-red-600">{error}</p>
            )}
        </div>
    );
};

================
File: components/ui/Spinner.jsx
================
export const Spinner = ({
    size = 'md',
    color = 'blue',
    className = ''
}) => {
    const sizeClasses = {
        sm: 'h-4 w-4 border-2',
        md: 'h-8 w-8 border-2',
        lg: 'h-12 w-12 border-3',
    };

    const colorClasses = {
        blue: 'border-blue-500',
        gray: 'border-gray-500',
        green: 'border-green-500',
        red: 'border-red-500',
        white: 'border-white',
    };

    return (
        <div className={`animate-spin rounded-full border-t-transparent ${sizeClasses[size]} ${colorClasses[color]} ${className}`}></div>
    );
};

================
File: components/ui/Table.jsx
================
export const Table = ({
    columns,
    data,
    onRowClick,
    isLoading = false,
    emptyState,
    className = ''
}) => {
    return (
        <div className={`overflow-x-auto shadow-md rounded-lg ${className}`}>
            <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                    <tr>
                        {columns.map((column, index) => (
                            <th
                                key={index}
                                scope="col"
                                className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${column.className || ''
                                    }`}
                            >
                                {column.header}
                            </th>
                        ))}
                    </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                    {isLoading ? (
                        <tr>
                            <td colSpan={columns.length} className="px-6 py-4 text-center">
                                <div className="flex justify-center">
                                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
                                </div>
                                <p className="mt-2 text-sm text-gray-500">Loading data...</p>
                            </td>
                        </tr>
                    ) : data.length === 0 ? (
                        <tr>
                            <td colSpan={columns.length} className="px-6 py-8 text-center">
                                {emptyState || (
                                    <div>
                                        <p className="text-sm font-medium text-gray-900">No items found</p>
                                        <p className="text-sm text-gray-500 mt-1">Try adjusting your search or filter criteria</p>
                                    </div>
                                )}
                            </td>
                        </tr>
                    ) : (
                        data.map((row, rowIndex) => (
                            <tr
                                key={rowIndex}
                                className={`${onRowClick ? 'cursor-pointer hover:bg-gray-50' : ''} ${rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'
                                    }`}
                                onClick={onRowClick ? () => onRowClick(row) : undefined}
                            >
                                {columns.map((column, colIndex) => (
                                    <td
                                        key={colIndex}
                                        className={`px-6 py-4 whitespace-nowrap text-sm ${column.cellClassName || ''
                                            }`}
                                    >
                                        {column.render ? column.render(row) : row[column.accessor]}
                                    </td>
                                ))}
                            </tr>
                        ))
                    )}
                </tbody>
            </table>
        </div>
    );
};

================
File: components/ui/Tabs.jsx
================
export const Tabs = ({
    tabs,
    activeTab,
    onChange,
    className = ''
}) => {
    return (
        <div className={`border-b border-gray-200 ${className}`}>
            <nav className="flex -mb-px space-x-8 overflow-x-auto">
                {tabs.map((tab) => (
                    <button
                        key={tab.id}
                        className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${activeTab === tab.id
                                ? 'border-blue-500 text-blue-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                            }`}
                        onClick={() => onChange(tab.id)}
                    >
                        {tab.label}
                    </button>
                ))}
            </nav>
        </div>
    );
};

================
File: lib/api.js
================
import axios from 'axios';

// Create API client with base URL
const api = axios.create({
    baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api',
    headers: {
        'Content-Type': 'application/json',
    },
});

// API functions for Supplier Discovery
export const supplierApi = {
    getAll: (filters = {}) => api.get('/suppliers/', { params: filters }),
    getById: (id) => api.get(`/suppliers/${id}`),
    search: (criteria) => api.post('/suppliers/search', criteria),
    getRecommended: (category) => api.get('/suppliers/recommend', { params: { category } }),
};

// API functions for Negotiation Companion
export const negotiationApi = {
    generateDossier: (supplierData) => api.post('/negotiations/generate-dossier', supplierData),
    getStrategies: (params) => api.get('/negotiations/strategies', { params }),
    draftMessage: (messageData) => api.post('/negotiations/messages', messageData),
};

// API functions for Compliance Guardian
export const complianceApi = {
    analyzeDocument: (document) => {
        const formData = new FormData();
        formData.append('document', document);
        return api.post('/compliance/analyze-document', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    },
    getRequirements: (params) => api.get('/compliance/requirements', { params }),
    verifyCompliance: (supplierData) => api.post('/compliance/verify', supplierData),
};

// API functions for Order Agent
export const orderApi = {
    createOrder: (orderData) => api.post('/orders/', orderData),
    getOrderById: (id) => api.get(`/orders/${id}`),
    updateOrderStatus: (id, status) => api.put(`/orders/${id}/status`, { status }),
    getAllOrders: () => api.get('/orders/'),
};

export default api;

================
File: lib/compliance.csv
================
"id","supplierId","supplierName","documentType","status","expiryDate","lastChecked","category","notes"
1,1,"ElectroTech Industries","ISO 9001 Certification","compliant","2024-06-30","2023-09-12","Quality Management","Certification verified with issuing body"
2,1,"ElectroTech Industries","Environmental Policy","compliant","2024-11-15","2023-09-12","Environmental","Document meets all requirements"
3,2,"Global Packaging Solutions","Food Safety Certification","review","2023-10-30","2023-09-10","Product Safety","Certification expires in less than 60 days"
4,3,"RawMat Suppliers Inc","REACH Compliance","non-compliant","2023-07-15","2023-09-05","Regulatory","Certification expired, follow-up required"
5,4,"FastTrack Logistics","Insurance Certificate","compliant","2024-02-28","2023-09-01","Insurance","Coverage meets minimum requirements"
6,5,"Quality Service Providers","Professional Certifications","compliant","2024-05-15","2023-08-20","Professional Qualifications","All staff certifications verified"
7,3,"RawMat Suppliers Inc","Fair Labor Practices","review",,"2023-09-08","Social Responsibility","Additional documentation requested"

================
File: lib/exportDataToCsv.js
================
// exportDataToCsv.js
const fs = require('fs');
const { Parser } = require('json2csv');
const { mockSuppliers, mockOrders, mockNegotiations, mockComplianceItems } = require('./mockData');

// Function to convert JSON to CSV and save it to a file
function exportToCSV(data, filename) {
  try {
    const parser = new Parser();
    const csv = parser.parse(data);
    fs.writeFileSync(filename, csv);
    console.log(`Successfully wrote ${filename}`);
  } catch (err) {
    console.error(`Error converting to CSV for ${filename}: `, err);
  }
}

// Export each dataset to a CSV file
exportToCSV(mockSuppliers, 'suppliers.csv');
exportToCSV(mockOrders, 'orders.csv');
exportToCSV(mockNegotiations, 'negotiations.csv');
exportToCSV(mockComplianceItems, 'compliance.csv');

================
File: lib/mockData.js
================
// lib/mockData.js
export const mockSuppliers = [
    {
      id: 1,
      name: 'ElectroTech Industries',
      logo: '/images/supplier1.png',
      description: 'ElectroTech Industries is a leading supplier of electronic components and assemblies for various industries.',
      category: 'Electronics',
      subcategory: 'Electronic Components',
      location: 'Shanghai, China',
      region: 'Asia',
      foundedYear: 2005,
      employees: '1000-5000',
      website: 'https://electrotech-industries.example.com',
      contactEmail: 'info@electrotech-industries.example.com',
      contactPhone: '+86 21 5555 1234',
      rating: 4.8,
      reliabilityScore: 92,
      qualityScore: 95,
      deliveryScore: 88,
      communicationScore: 90,
      status: 'active',
      complianceStatus: 'compliant',
      lastOrder: '2023-09-15',
      averageDiscount: 7.5,
      currentPricing: 'Premium',
      paymentTerms: 'Net 30',
      contractExpiry: '2024-03-15',
      certifications: [
        { name: 'ISO 9001:2015', valid: true, expirationDate: '2025-06-30' },
        { name: 'ISO 14001:2015', valid: true, expirationDate: '2024-11-15' },
        { name: 'RoHS Compliant', valid: true, expirationDate: '2024-12-31' },
      ],
      performanceHistory: [
        { month: 'Aug 2023', onTimeDelivery: 95, qualityCompliance: 98, costVariance: -2 },
        { month: 'Jul 2023', onTimeDelivery: 92, qualityCompliance: 97, costVariance: -1 },
        { month: 'Jun 2023', onTimeDelivery: 94, qualityCompliance: 95, costVariance: 0 },
        { month: 'May 2023', onTimeDelivery: 90, qualityCompliance: 96, costVariance: -3 },
        { month: 'Apr 2023', onTimeDelivery: 88, qualityCompliance: 94, costVariance: -2 },
        { month: 'Mar 2023', onTimeDelivery: 91, qualityCompliance: 93, costVariance: 1 },
      ],
      riskFactors: [
        { category: 'Geopolitical', level: 'medium', description: 'Occasional political tensions in the region' },
        { category: 'Supply Chain', level: 'low', description: 'Multiple backup suppliers available' },
        { category: 'Financial', level: 'low', description: 'Strong financial position with consistent growth' },
      ],
      products: [
        { id: 101, name: 'Microcontrollers', category: 'Semiconductors', leadTime: '2-3 weeks', minOrderQty: 1000, unitPrice: 15 },
        { id: 102, name: 'Sensors', category: 'Electronic Components', leadTime: '1-2 weeks', minOrderQty: 500, unitPrice: 12 },
        { id: 103, name: 'PCB Assemblies', category: 'Assemblies', leadTime: '3-4 weeks', minOrderQty: 100, unitPrice: 120 },
      ],
      recentOrders: [
        { id: 'ORD-2023-421', date: '2023-09-15', status: 'Delivered', amount: 45000 },
        { id: 'ORD-2023-387', date: '2023-08-28', status: 'Delivered', amount: 32000 },
        { id: 'ORD-2023-352', date: '2023-07-15', status: 'Delivered', amount: 58000 },
      ],
      negotiationHistory: [
        { date: '2023-06-15', outcome: 'Success', savings: 8.2 },
        { date: '2022-12-10', outcome: 'Partial', savings: 5.0 },
        { date: '2022-06-22', outcome: 'Success', savings: 7.5 },
      ],
      annualRevenue: 1200000,
      annualProfit: 240000,
      profitMargin: 20
    },
    {
      id: 2,
      name: 'Global Packaging Solutions',
      logo: '/images/supplier2.png',
      description: 'Global Packaging Solutions provides innovative and sustainable packaging solutions for consumer goods and industrial applications.',
      category: 'Packaging',
      subcategory: 'Custom Packaging',
      location: 'Berlin, Germany',
      region: 'Europe',
      foundedYear: 2010,
      employees: '500-1000',
      website: 'https://globalpackaging.example.com',
      contactEmail: 'contact@globalpackaging.example.com',
      contactPhone: '+49 30 5555 6789',
      rating: 4.5,
      reliabilityScore: 88,
      qualityScore: 90,
      deliveryScore: 87,
      communicationScore: 85,
      status: 'active',
      complianceStatus: 'compliant',
      lastOrder: '2023-08-28',
      averageDiscount: 6.2,
      currentPricing: 'Standard',
      paymentTerms: 'Net 45',
      contractExpiry: '2024-02-10',
      certifications: [
        { name: 'ISO 9001:2015', valid: true, expirationDate: '2024-10-15' },
        { name: 'FSC Certified', valid: true, expirationDate: '2024-08-30' },
        { name: 'Plastic-Free Packaging Alliance', valid: true, expirationDate: '2025-01-15' },
      ],
      performanceHistory: [
        { month: 'Aug 2023', onTimeDelivery: 92, qualityCompliance: 94, costVariance: -1 },
        { month: 'Jul 2023', onTimeDelivery: 90, qualityCompliance: 92, costVariance: 0 },
        { month: 'Jun 2023', onTimeDelivery: 88, qualityCompliance: 91, costVariance: 1 },
        { month: 'May 2023', onTimeDelivery: 85, qualityCompliance: 90, costVariance: 0 },
        { month: 'Apr 2023', onTimeDelivery: 87, qualityCompliance: 89, costVariance: -1 },
        { month: 'Mar 2023', onTimeDelivery: 84, qualityCompliance: 88, costVariance: 2 },
      ],
      riskFactors: [
        { category: 'Geopolitical', level: 'low', description: 'Stable political environment in Europe' },
        { category: 'Supply Chain', level: 'medium', description: 'Dependent on imported raw materials' },
        { category: 'Financial', level: 'low', description: 'Solid financial standing with diverse clientele' },
      ],
      products: [
        { id: 201, name: 'Custom Boxes', category: 'Packaging', leadTime: '2-3 weeks', minOrderQty: 5000, unitPrice: 2 },
        { id: 202, name: 'Protective Packaging', category: 'Packaging', leadTime: '1-2 weeks', minOrderQty: 1000, unitPrice: 5 },
        { id: 203, name: 'Shipping Materials', category: 'Packaging', leadTime: '1 week', minOrderQty: 10000, unitPrice: 0.5 },
      ],
      recentOrders: [
        { id: 'ORD-2023-415', date: '2023-08-25', status: 'Delivered', amount: 5000 },
        { id: 'ORD-2023-376', date: '2023-07-18', status: 'Delivered', amount: 15000 },
        { id: 'ORD-2023-342', date: '2023-06-12', status: 'Delivered', amount: 12000 },
      ],
      negotiationHistory: [
        { date: '2023-07-10', outcome: 'Success', savings: 6.2 },
        { date: '2022-11-15', outcome: 'Success', savings: 5.8 },
        { date: '2022-05-20', outcome: 'Partial', savings: 3.5 },
      ],
      annualRevenue: 800000,
      annualProfit: 160000,
      profitMargin: 20
    },
    {
      id: 3,
      name: 'RawMat Suppliers Inc',
      logo: '/images/supplier3.png',
      description: 'RawMat Suppliers Inc specializes in providing high-quality raw materials for manufacturing, including industrial polymers and adhesives.',
      category: 'Raw Materials',
      subcategory: 'Industrial Polymers',
      location: 'Chicago, USA',
      region: 'North America',
      foundedYear: 1998,
      employees: '100-500',
      website: 'https://rawmat.example.com',
      contactEmail: 'sales@rawmat.example.com',
      contactPhone: '+1 312 555 7890',
      rating: 4.2,
      reliabilityScore: 85,
      qualityScore: 88,
      deliveryScore: 82,
      communicationScore: 80,
      status: 'active',
      complianceStatus: 'review',
      lastOrder: '2023-09-05',
      averageDiscount: 5.5,
      currentPricing: 'Economy',
      paymentTerms: 'Net 60',
      contractExpiry: '2024-04-30',
      certifications: [
        { name: 'ISO 9001:2015', valid: true, expirationDate: '2024-05-20' },
        { name: 'REACH Compliant', valid: true, expirationDate: '2024-07-10' },
        { name: 'ISO 14001:2015', valid: false, expirationDate: '2023-06-15' },
      ],
      performanceHistory: [
        { month: 'Aug 2023', onTimeDelivery: 86, qualityCompliance: 90, costVariance: 1 },
        { month: 'Jul 2023', onTimeDelivery: 84, qualityCompliance: 88, costVariance: 2 },
        { month: 'Jun 2023', onTimeDelivery: 80, qualityCompliance: 87, costVariance: 0 },
        { month: 'May 2023', onTimeDelivery: 81, qualityCompliance: 85, costVariance: -1 },
        { month: 'Apr 2023', onTimeDelivery: 83, qualityCompliance: 86, costVariance: 3 },
        { month: 'Mar 2023', onTimeDelivery: 79, qualityCompliance: 84, costVariance: 1 },
      ],
      riskFactors: [
        { category: 'Geopolitical', level: 'low', description: 'Stable business environment in the USA' },
        { category: 'Supply Chain', level: 'medium', description: 'Susceptible to raw material price fluctuations' },
        { category: 'Financial', level: 'medium', description: 'Expansion causing increased debt load' },
      ],
      products: [
        { id: 301, name: 'Industrial Polymers', category: 'Raw Materials', leadTime: '2-4 weeks', minOrderQty: 500, unitPrice: 40 },
        { id: 302, name: 'Adhesives', category: 'Raw Materials', leadTime: '1-2 weeks', minOrderQty: 200, unitPrice: 30 },
        { id: 303, name: 'Metals', category: 'Raw Materials', leadTime: '3-5 weeks', minOrderQty: 1000, unitPrice: 25 },
      ],
      recentOrders: [
        { id: 'ORD-2023-418', date: '2023-09-05', status: 'Processing', amount: 26000 },
        { id: 'ORD-2023-389', date: '2023-08-12', status: 'Delivered', amount: 18000 },
        { id: 'ORD-2023-360', date: '2023-07-01', status: 'Delivered', amount: 22000 },
      ],
      negotiationHistory: [
        { date: '2023-05-20', outcome: 'Partial', savings: 4.2 },
        { date: '2022-10-05', outcome: 'Success', savings: 6.5 },
        { date: '2022-04-15', outcome: 'Success', savings: 5.8 },
      ],
      annualRevenue: 600000,
      annualProfit: 90000,
      profitMargin: 15
    },
    {
      id: 4,
      name: 'FastTrack Logistics',
      logo: '/images/supplier4.png',
      description: 'FastTrack Logistics offers comprehensive express shipping, warehousing, and distribution services.',
      category: 'Logistics',
      subcategory: 'Express Shipping',
      location: 'Atlanta, USA',
      region: 'North America',
      foundedYear: 2007,
      employees: '1000-5000',
      website: 'https://fasttracklogistics.example.com',
      contactEmail: 'info@fasttrack.example.com',
      contactPhone: '+1 404 555 2345',
      rating: 4.6,
      reliabilityScore: 90,
      qualityScore: 88,
      deliveryScore: 95,
      communicationScore: 88,
      status: 'inactive',
      complianceStatus: 'non-compliant',
      lastOrder: '2023-09-10',
      averageDiscount: 4.8,
      currentPricing: 'Premium',
      paymentTerms: 'Net 15',
      contractExpiry: '2024-01-15',
      certifications: [
        { name: 'ISO 9001:2015', valid: true, expirationDate: '2024-03-15' },
        { name: 'C-TPAT Certified', valid: false, expirationDate: '2023-08-20' },
        { name: 'ISPM 15 Compliant', valid: true, expirationDate: '2024-02-28' },
      ],
      performanceHistory: [
        { month: 'Aug 2023', onTimeDelivery: 97, qualityCompliance: 92, costVariance: 2 },
        { month: 'Jul 2023', onTimeDelivery: 98, qualityCompliance: 90, costVariance: 1 },
        { month: 'Jun 2023', onTimeDelivery: 96, qualityCompliance: 89, costVariance: 0 },
        { month: 'May 2023', onTimeDelivery: 95, qualityCompliance: 87, costVariance: 3 },
        { month: 'Apr 2023', onTimeDelivery: 97, qualityCompliance: 88, costVariance: 2 },
        { month: 'Mar 2023', onTimeDelivery: 94, qualityCompliance: 86, costVariance: 1 },
      ],
      riskFactors: [
        { category: 'Geopolitical', level: 'low', description: 'Operates in stable regions' },
        { category: 'Supply Chain', level: 'high', description: 'Susceptible to fuel price and labor shortages' },
        { category: 'Financial', level: 'medium', description: 'High operational costs with thin margins' },
      ],
      products: [
        { id: 401, name: 'Express Shipping', category: 'Logistics', leadTime: '1-3 days', minOrderQty: 1, unitPrice: 8000 },
        { id: 402, name: 'Warehousing', category: 'Logistics', leadTime: 'Immediate', minOrderQty: 1, unitPrice: 5000 },
        { id: 403, name: 'Distribution', category: 'Logistics', leadTime: '1 week', minOrderQty: 1, unitPrice: 7500 },
      ],
      recentOrders: [
        { id: 'ORD-2023-419', date: '2023-09-10', status: 'Shipped', amount: 8000 },
        { id: 'ORD-2023-401', date: '2023-08-22', status: 'Delivered', amount: 12500 },
        { id: 'ORD-2023-375', date: '2023-08-05', status: 'Delivered', amount: 15000 },
      ],
      negotiationHistory: [
        { date: '2023-08-05', outcome: 'Success', savings: 4.8 },
        { date: '2023-01-20', outcome: 'Partial', savings: 3.2 },
        { date: '2022-07-10', outcome: 'Success', savings: 5.0 },
      ],
      annualRevenue: 1500000,
      annualProfit: 225000,
      profitMargin: 15
    },
    {
      id: 5,
      name: 'Quality Service Providers',
      logo: '/images/supplier5.png',
      description: 'Quality Service Providers delivers professional consulting and quality management services.',
      category: 'Services',
      subcategory: 'Quality Consulting',
      location: 'London, UK',
      region: 'Europe',
      foundedYear: 2011,
      employees: '50-100',
      website: 'https://qualityservices.example.com',
      contactEmail: 'enquiries@qualityservices.example.com',
      contactPhone: '+44 20 5555 6789',
      rating: 4.1,
      reliabilityScore: 82,
      qualityScore: 87,
      deliveryScore: 80,
      communicationScore: 94,
      status: 'active',
      complianceStatus: 'compliant',
      lastOrder: '2023-08-15',
      averageDiscount: 8.0,
      currentPricing: 'Standard',
      paymentTerms: 'Net 45',
      contractExpiry: '2024-06-15',
      certifications: [
        { name: 'ISO 9001:2015', valid: true, expirationDate: '2025-01-10' },
        { name: 'ISO 27001:2013', valid: true, expirationDate: '2024-09-15' },
        { name: 'Six Sigma Certification', valid: true, expirationDate: '2024-05-20' },
      ],
      performanceHistory: [
        { month: 'Aug 2023', onTimeDelivery: 84, qualityCompliance: 92, costVariance: -1 },
        { month: 'Jul 2023', onTimeDelivery: 82, qualityCompliance: 90, costVariance: 0 },
        { month: 'Jun 2023', onTimeDelivery: 80, qualityCompliance: 89, costVariance: -2 },
        { month: 'May 2023', onTimeDelivery: 83, qualityCompliance: 88, costVariance: 1 },
        { month: 'Apr 2023', onTimeDelivery: 81, qualityCompliance: 91, costVariance: -1 },
        { month: 'Mar 2023', onTimeDelivery: 79, qualityCompliance: 87, costVariance: 0 },
      ],
      riskFactors: [
        { category: 'Geopolitical', level: 'low', description: 'Stable business environment in the UK' },
        { category: 'Supply Chain', level: 'low', description: 'Minimal dependency due to service-based nature' },
        { category: 'Financial', level: 'medium', description: 'Small firm with limited financial buffers' },
      ],
      products: [
        { id: 501, name: 'Consulting Services', category: 'Services', leadTime: 'On-demand', minOrderQty: 1, unitPrice: 15000 },
        { id: 502, name: 'Quality Audits', category: 'Services', leadTime: '2-3 weeks', minOrderQty: 1, unitPrice: 2000 },
        { id: 503, name: 'Training', category: 'Services', leadTime: '1-2 weeks', minOrderQty: 1, unitPrice: 5000 },
      ],
      recentOrders: [
        { id: 'ORD-2023-416', date: '2023-08-28', status: 'Processing', amount: 25000 },
        { id: 'ORD-2023-386', date: '2023-07-12', status: 'Delivered', amount: 17000 },
        { id: 'ORD-2023-355', date: '2023-06-05', status: 'Delivered', amount: 12000 },
      ],
      negotiationHistory: [
        { date: '2023-06-30', outcome: 'Success', savings: 8.0 },
        { date: '2022-12-20', outcome: 'Success', savings: 7.5 },
        { date: '2022-06-05', outcome: 'Partial', savings: 4.0 },
      ],
      annualRevenue: 500000,
      annualProfit: 75000,
      profitMargin: 15
    },
    {
      id: 6,
      name: 'ChemSolutions Ltd',
      logo: '/images/supplier6.png',
      description: 'ChemSolutions Ltd manufactures and distributes industrial chemicals and solvents for various sectors.',
      category: 'Chemicals',
      subcategory: 'Industrial Chemicals',
      location: 'Frankfurt, Germany',
      region: 'Europe',
      foundedYear: 2003,
      employees: '100-500',
      website: 'https://chemsolutions.example.com',
      contactEmail: 'sales@chemsolutions.example.com',
      contactPhone: '+49 69 5555 8901',
      rating: 4.3,
      reliabilityScore: 87,
      qualityScore: 89,
      deliveryScore: 85,
      communicationScore: 83,
      status: 'active',
      complianceStatus: 'compliant',
      lastOrder: '2023-09-01',
      averageDiscount: 6.8,
      currentPricing: 'Premium',
      paymentTerms: 'Net 30',
      contractExpiry: '2024-05-15',
      certifications: [
        { name: 'ISO 9001:2015', valid: true, expirationDate: '2024-08-10' },
        { name: 'ISO 14001:2015', valid: true, expirationDate: '2024-07-15' },
        { name: 'REACH Compliant', valid: true, expirationDate: '2024-12-20' },
      ],
      performanceHistory: [
        { month: 'Aug 2023', onTimeDelivery: 89, qualityCompliance: 92, costVariance: 0 },
        { month: 'Jul 2023', onTimeDelivery: 87, qualityCompliance: 90, costVariance: -1 },
        { month: 'Jun 2023', onTimeDelivery: 86, qualityCompliance: 91, costVariance: 1 },
        { month: 'May 2023', onTimeDelivery: 84, qualityCompliance: 88, costVariance: 0 },
        { month: 'Apr 2023', onTimeDelivery: 88, qualityCompliance: 87, costVariance: 2 },
        { month: 'Mar 2023', onTimeDelivery: 85, qualityCompliance: 89, costVariance: -1 },
      ],
      riskFactors: [
        { category: 'Geopolitical', level: 'low', description: 'Stable market conditions in Europe' },
        { category: 'Supply Chain', level: 'medium', description: 'Dependence on international raw materials' },
        { category: 'Financial', level: 'low', description: 'Healthy profit margins and solid financials' },
      ],
      products: [
        { id: 601, name: 'Solvents', category: 'Chemicals', leadTime: '2-3 weeks', minOrderQty: 200, unitPrice: 45 },
        { id: 602, name: 'Adhesives', category: 'Chemicals', leadTime: '1-2 weeks', minOrderQty: 100, unitPrice: 60 },
        { id: 603, name: 'Cleaning Chemicals', category: 'Chemicals', leadTime: '1-2 weeks', minOrderQty: 300, unitPrice: 35 },
      ],
      recentOrders: [
        { id: 'ORD-2023-412', date: '2023-09-01', status: 'Processing', amount: 22000 },
        { id: 'ORD-2023-390', date: '2023-08-10', status: 'Delivered', amount: 18500 },
        { id: 'ORD-2023-361', date: '2023-07-05', status: 'Delivered', amount: 15000 },
      ],
      negotiationHistory: [
        { date: '2023-07-15', outcome: 'Success', savings: 6.8 },
        { date: '2022-12-05', outcome: 'Partial', savings: 4.5 },
        { date: '2022-05-12', outcome: 'Success', savings: 7.2 },
      ],
      annualRevenue: 950000,
      annualProfit: 142500,
      profitMargin: 15
    }
  ];



// Helper function to get a supplier by ID
export const getSupplierById = (id) => {
    return mockSuppliers.find(supplier => supplier.id === parseInt(id)) || null;
};

// Mock orders data
export const mockOrders = [
    {
        id: 'ORD-2023-421',
        supplierId: 1,
        supplierName: 'ElectroTech Industries',
        date: '2023-09-15',
        deliveryDate: '2023-09-30',
        status: 'processing',
        items: [
            { name: 'Microcontrollers', quantity: 1000, unitPrice: 15, total: 15000 },
            { name: 'Sensors', quantity: 2000, unitPrice: 12, total: 24000 }
        ],
        total: 39000,
        paymentTerms: 'Net 30',
        notes: 'Priority order for Q4 production',
        lastUpdated: '2023-09-16'
    },
    {
        id: 'ORD-2023-420',
        supplierId: 2,
        supplierName: 'Global Packaging Solutions',
        date: '2023-09-14',
        deliveryDate: '2023-09-28',
        status: 'draft',
        items: [
            { name: 'Custom Boxes', quantity: 5000, unitPrice: 2, total: 10000 },
            { name: 'Protective Packaging', quantity: 1000, unitPrice: 5, total: 5000 }
        ],
        total: 15000,
        paymentTerms: 'Net 30',
        notes: 'Awaiting final approval',
        lastUpdated: '2023-09-14'
    },
    {
        id: 'ORD-2023-419',
        supplierId: 4,
        supplierName: 'FastTrack Logistics',
        date: '2023-09-10',
        deliveryDate: '2023-09-17',
        status: 'shipped',
        items: [
            { name: 'Express Shipping', quantity: 1, unitPrice: 8000, total: 8000 }
        ],
        total: 8000,
        paymentTerms: 'Net 15',
        notes: 'Time-sensitive shipment',
        lastUpdated: '2023-09-12',
        trackingNumber: 'FTL-39485-28B'
    },
    {
        id: 'ORD-2023-418',
        supplierId: 3,
        supplierName: 'RawMat Suppliers Inc',
        date: '2023-09-05',
        deliveryDate: '2023-09-20',
        status: 'processing',
        items: [
            { name: 'Industrial Polymers', quantity: 500, unitPrice: 40, total: 20000 },
            { name: 'Adhesives', quantity: 200, unitPrice: 30, total: 6000 }
        ],
        total: 26000,
        paymentTerms: 'Net 30',
        notes: 'Special handling required',
        lastUpdated: '2023-09-08'
    },
    {
        id: 'ORD-2023-417',
        supplierId: 1,
        supplierName: 'ElectroTech Industries',
        date: '2023-09-01',
        deliveryDate: '2023-09-15',
        status: 'delivered',
        items: [
            { name: 'PCB Assemblies', quantity: 100, unitPrice: 120, total: 12000 }
        ],
        total: 12000,
        paymentTerms: 'Net 30',
        notes: 'Delivered on time, quality check passed',
        lastUpdated: '2023-09-16',
        deliveredDate: '2023-09-15'
    },
    {
        id: 'ORD-2023-416',
        supplierId: 5,
        supplierName: 'Quality Service Providers',
        date: '2023-08-28',
        deliveryDate: '2023-10-15',
        status: 'processing',
        items: [
            { name: 'Consulting Services', quantity: 1, unitPrice: 15000, total: 15000 },
            { name: 'Quality Audits', quantity: 5, unitPrice: 2000, total: 10000 }
        ],
        total: 25000,
        paymentTerms: 'Net 45',
        notes: 'Ongoing service contract',
        lastUpdated: '2023-09-10'
    },
    {
        id: 'ORD-2023-415',
        supplierId: 2,
        supplierName: 'Global Packaging Solutions',
        date: '2023-08-25',
        deliveryDate: '2023-09-08',
        status: 'delivered',
        items: [
            { name: 'Shipping Materials', quantity: 10000, unitPrice: 0.5, total: 5000 }
        ],
        total: 5000,
        paymentTerms: 'Net 30',
        notes: 'Regular monthly order',
        lastUpdated: '2023-09-09',
        deliveredDate: '2023-09-08'
    }
];

// Mock negotiations data
export const mockNegotiations = [
    {
        id: 1,
        supplierId: 1,
        supplierName: 'ElectroTech Industries',
        category: 'Electronics',
        startDate: '2023-09-10',
        status: 'active',
        nextAction: 'Awaiting supplier response',
        lastActivity: '2023-09-15',
        products: ['Microcontrollers', 'Sensors'],
        targetSavings: 8.5,
        currentStage: 'Counter Offer',
        priority: 'high'
    },
    {
        id: 2,
        supplierId: 2,
        supplierName: 'Global Packaging Solutions',
        category: 'Packaging',
        startDate: '2023-09-05',
        status: 'active',
        nextAction: 'Review supplier proposal',
        lastActivity: '2023-09-14',
        products: ['Custom Boxes', 'Protective Packaging'],
        targetSavings: 5.2,
        currentStage: 'Initial Proposal',
        priority: 'medium'
    },
    {
        id: 3,
        supplierId: 3,
        supplierName: 'RawMat Suppliers Inc',
        category: 'Raw Materials',
        startDate: '2023-08-28',
        status: 'scheduled',
        nextAction: 'Kickoff meeting on 2023-09-20',
        lastActivity: '2023-09-12',
        products: ['Industrial Polymers', 'Adhesives'],
        targetSavings: 7.0,
        currentStage: 'Planning',
        priority: 'low'
    },
    {
        id: 4,
        supplierId: 5,
        supplierName: 'Quality Service Providers',
        category: 'Services',
        startDate: '2023-08-15',
        status: 'completed',
        nextAction: 'Implementation',
        lastActivity: '2023-09-08',
        products: ['Consulting Services', 'Quality Audits'],
        targetSavings: 10.0,
        currentStage: 'Agreement',
        priority: 'medium',
        outcome: 'Success',
        actualSavings: 11.2
    }
];

// Mock compliance items data
export const mockComplianceItems = [
    {
        id: 1,
        supplierId: 1,
        supplierName: 'ElectroTech Industries',
        documentType: 'ISO 9001 Certification',
        status: 'compliant',
        expiryDate: '2024-06-30',
        lastChecked: '2023-09-12',
        category: 'Quality Management',
        notes: 'Certification verified with issuing body'
    },
    {
        id: 2,
        supplierId: 1,
        supplierName: 'ElectroTech Industries',
        documentType: 'Environmental Policy',
        status: 'compliant',
        expiryDate: '2024-11-15',
        lastChecked: '2023-09-12',
        category: 'Environmental',
        notes: 'Document meets all requirements'
    },
    {
        id: 3,
        supplierId: 2,
        supplierName: 'Global Packaging Solutions',
        documentType: 'Food Safety Certification',
        status: 'review',
        expiryDate: '2023-10-30',
        lastChecked: '2023-09-10',
        category: 'Product Safety',
        notes: 'Certification expires in less than 60 days'
    },
    {
        id: 4,
        supplierId: 3,
        supplierName: 'RawMat Suppliers Inc',
        documentType: 'REACH Compliance',
        status: 'non-compliant',
        expiryDate: '2023-07-15',
        lastChecked: '2023-09-05',
        category: 'Regulatory',
        notes: 'Certification expired, follow-up required'
    },
    {
        id: 5,
        supplierId: 4,
        supplierName: 'FastTrack Logistics',
        documentType: 'Insurance Certificate',
        status: 'compliant',
        expiryDate: '2024-02-28',
        lastChecked: '2023-09-01',
        category: 'Insurance',
        notes: 'Coverage meets minimum requirements'
    },
    {
        id: 6,
        supplierId: 5,
        supplierName: 'Quality Service Providers',
        documentType: 'Professional Certifications',
        status: 'compliant',
        expiryDate: '2024-05-15',
        lastChecked: '2023-08-20',
        category: 'Professional Qualifications',
        notes: 'All staff certifications verified'
    },
    {
        id: 7,
        supplierId: 3,
        supplierName: 'RawMat Suppliers Inc',
        documentType: 'Fair Labor Practices',
        status: 'review',
        expiryDate: null,
        lastChecked: '2023-09-08',
        category: 'Social Responsibility',
        notes: 'Additional documentation requested'
    },
];

// Other mock data can be added as needed for the application

================
File: lib/negotiations.csv
================
"id","supplierId","supplierName","category","startDate","status","nextAction","lastActivity","products","targetSavings","currentStage","priority","outcome","actualSavings"
1,1,"ElectroTech Industries","Electronics","2023-09-10","active","Awaiting supplier response","2023-09-15","[""Microcontrollers"",""Sensors""]",8.5,"Counter Offer","high",,
2,2,"Global Packaging Solutions","Packaging","2023-09-05","active","Review supplier proposal","2023-09-14","[""Custom Boxes"",""Protective Packaging""]",5.2,"Initial Proposal","medium",,
3,3,"RawMat Suppliers Inc","Raw Materials","2023-08-28","scheduled","Kickoff meeting on 2023-09-20","2023-09-12","[""Industrial Polymers"",""Adhesives""]",7,"Planning","low",,
4,5,"Quality Service Providers","Services","2023-08-15","completed","Implementation","2023-09-08","[""Consulting Services"",""Quality Audits""]",10,"Agreement","medium","Success",11.2

================
File: lib/orders.csv
================
"id","supplierId","supplierName","date","deliveryDate","status","items","total","paymentTerms","notes","lastUpdated","trackingNumber","deliveredDate"
"ORD-2023-421",1,"ElectroTech Industries","2023-09-15","2023-09-30","processing","[{""name"":""Microcontrollers"",""quantity"":1000,""unitPrice"":15,""total"":15000},{""name"":""Sensors"",""quantity"":2000,""unitPrice"":12,""total"":24000}]",39000,"Net 30","Priority order for Q4 production","2023-09-16",,
"ORD-2023-420",2,"Global Packaging Solutions","2023-09-14","2023-09-28","draft","[{""name"":""Custom Boxes"",""quantity"":5000,""unitPrice"":2,""total"":10000},{""name"":""Protective Packaging"",""quantity"":1000,""unitPrice"":5,""total"":5000}]",15000,"Net 30","Awaiting final approval","2023-09-14",,
"ORD-2023-419",4,"FastTrack Logistics","2023-09-10","2023-09-17","shipped","[{""name"":""Express Shipping"",""quantity"":1,""unitPrice"":8000,""total"":8000}]",8000,"Net 15","Time-sensitive shipment","2023-09-12","FTL-39485-28B",
"ORD-2023-418",3,"RawMat Suppliers Inc","2023-09-05","2023-09-20","processing","[{""name"":""Industrial Polymers"",""quantity"":500,""unitPrice"":40,""total"":20000},{""name"":""Adhesives"",""quantity"":200,""unitPrice"":30,""total"":6000}]",26000,"Net 30","Special handling required","2023-09-08",,
"ORD-2023-417",1,"ElectroTech Industries","2023-09-01","2023-09-15","delivered","[{""name"":""PCB Assemblies"",""quantity"":100,""unitPrice"":120,""total"":12000}]",12000,"Net 30","Delivered on time, quality check passed","2023-09-16",,"2023-09-15"
"ORD-2023-416",5,"Quality Service Providers","2023-08-28","2023-10-15","processing","[{""name"":""Consulting Services"",""quantity"":1,""unitPrice"":15000,""total"":15000},{""name"":""Quality Audits"",""quantity"":5,""unitPrice"":2000,""total"":10000}]",25000,"Net 45","Ongoing service contract","2023-09-10",,
"ORD-2023-415",2,"Global Packaging Solutions","2023-08-25","2023-09-08","delivered","[{""name"":""Shipping Materials"",""quantity"":10000,""unitPrice"":0.5,""total"":5000}]",5000,"Net 30","Regular monthly order","2023-09-09",,"2023-09-08"

================
File: lib/suppliers.csv
================
"id","name","logo","description","category","subcategory","location","region","foundedYear","employees","website","contactEmail","contactPhone","rating","reliabilityScore","qualityScore","deliveryScore","communicationScore","status","complianceStatus","lastOrder","averageDiscount","currentPricing","paymentTerms","contractExpiry","certifications","performanceHistory","riskFactors","products","recentOrders","negotiationHistory"
1,"ElectroTech Industries","/images/supplier1.png","ElectroTech Industries is a leading supplier of electronic components and assemblies for various industries including automotive, consumer electronics, and industrial automation.","Electronics","Electronic Components","Shanghai, China","Asia",2005,"1000-5000","https://electrotech-industries.example.com","info@electrotech-industries.example.com","+86 21 5555 1234",4.8,92,95,88,90,"active","compliant","2023-09-15",7.5,"Premium","Net 30","2024-03-15","[{""name"":""ISO 9001:2015"",""valid"":true,""expirationDate"":""2025-06-30""},{""name"":""ISO 14001:2015"",""valid"":true,""expirationDate"":""2024-11-15""},{""name"":""RoHS Compliant"",""valid"":true,""expirationDate"":""2024-12-31""}]","[{""month"":""Aug 2023"",""onTimeDelivery"":95,""qualityCompliance"":98,""costVariance"":-2},{""month"":""Jul 2023"",""onTimeDelivery"":92,""qualityCompliance"":97,""costVariance"":-1},{""month"":""Jun 2023"",""onTimeDelivery"":94,""qualityCompliance"":95,""costVariance"":0},{""month"":""May 2023"",""onTimeDelivery"":90,""qualityCompliance"":96,""costVariance"":-3},{""month"":""Apr 2023"",""onTimeDelivery"":88,""qualityCompliance"":94,""costVariance"":-2},{""month"":""Mar 2023"",""onTimeDelivery"":91,""qualityCompliance"":93,""costVariance"":1}]","[{""category"":""Geopolitical"",""level"":""medium"",""description"":""Located in region with occasional political tensions""},{""category"":""Supply Chain"",""level"":""low"",""description"":""Multiple backup suppliers and robust inventory management""},{""category"":""Financial"",""level"":""low"",""description"":""Strong financial position with consistent growth""}]","[{""id"":101,""name"":""Microcontrollers"",""category"":""Semiconductors"",""leadTime"":""2-3 weeks"",""minOrderQty"":1000,""unitPrice"":15},{""id"":102,""name"":""Sensors"",""category"":""Electronic Components"",""leadTime"":""1-2 weeks"",""minOrderQty"":500,""unitPrice"":12},{""id"":103,""name"":""PCB Assemblies"",""category"":""Assemblies"",""leadTime"":""3-4 weeks"",""minOrderQty"":100,""unitPrice"":120}]","[{""id"":""ORD-2023-421"",""date"":""2023-09-15"",""status"":""Delivered"",""amount"":45000},{""id"":""ORD-2023-387"",""date"":""2023-08-28"",""status"":""Delivered"",""amount"":32000},{""id"":""ORD-2023-352"",""date"":""2023-07-15"",""status"":""Delivered"",""amount"":58000}]","[{""date"":""2023-06-15"",""outcome"":""Success"",""savings"":8.2},{""date"":""2022-12-10"",""outcome"":""Partial"",""savings"":5},{""date"":""2022-06-22"",""outcome"":""Success"",""savings"":7.5}]"
2,"Global Packaging Solutions","/images/supplier2.png","Global Packaging Solutions provides innovative and sustainable packaging solutions for consumer goods, electronics, and food industries with a focus on eco-friendly materials and designs.","Packaging","Custom Packaging","Berlin, Germany","Europe",2010,"500-1000","https://globalpackaging.example.com","contact@globalpackaging.example.com","+49 30 5555 6789",4.5,88,90,87,85,"active","compliant","2023-08-28",6.2,"Standard","Net 45","2024-02-10","[{""name"":""ISO 9001:2015"",""valid"":true,""expirationDate"":""2024-10-15""},{""name"":""FSC Certified"",""valid"":true,""expirationDate"":""2024-08-30""},{""name"":""Plastic-Free Packaging Alliance"",""valid"":true,""expirationDate"":""2025-01-15""}]","[{""month"":""Aug 2023"",""onTimeDelivery"":92,""qualityCompliance"":94,""costVariance"":-1},{""month"":""Jul 2023"",""onTimeDelivery"":90,""qualityCompliance"":92,""costVariance"":0},{""month"":""Jun 2023"",""onTimeDelivery"":88,""qualityCompliance"":91,""costVariance"":1},{""month"":""May 2023"",""onTimeDelivery"":85,""qualityCompliance"":90,""costVariance"":0},{""month"":""Apr 2023"",""onTimeDelivery"":87,""qualityCompliance"":89,""costVariance"":-1},{""month"":""Mar 2023"",""onTimeDelivery"":84,""qualityCompliance"":88,""costVariance"":2}]","[{""category"":""Geopolitical"",""level"":""low"",""description"":""Stable political environment with strong regulatory framework""},{""category"":""Supply Chain"",""level"":""medium"",""description"":""Some dependency on raw material imports from overseas""},{""category"":""Financial"",""level"":""low"",""description"":""Well-established company with diverse customer base""}]","[{""id"":201,""name"":""Custom Boxes"",""category"":""Packaging"",""leadTime"":""2-3 weeks"",""minOrderQty"":5000,""unitPrice"":2},{""id"":202,""name"":""Protective Packaging"",""category"":""Packaging"",""leadTime"":""1-2 weeks"",""minOrderQty"":1000,""unitPrice"":5},{""id"":203,""name"":""Shipping Materials"",""category"":""Packaging"",""leadTime"":""1 week"",""minOrderQty"":10000,""unitPrice"":0.5}]","[{""id"":""ORD-2023-415"",""date"":""2023-08-25"",""status"":""Delivered"",""amount"":5000},{""id"":""ORD-2023-376"",""date"":""2023-07-18"",""status"":""Delivered"",""amount"":15000},{""id"":""ORD-2023-342"",""date"":""2023-06-12"",""status"":""Delivered"",""amount"":12000}]","[{""date"":""2023-07-10"",""outcome"":""Success"",""savings"":6.2},{""date"":""2022-11-15"",""outcome"":""Success"",""savings"":5.8},{""date"":""2022-05-20"",""outcome"":""Partial"",""savings"":3.5}]"
3,"RawMat Suppliers Inc","/images/supplier3.png","RawMat Suppliers Inc specializes in providing high-quality raw materials for manufacturing processes across multiple industries, with expertise in industrial polymers, adhesives, and specialized metals.","Raw Materials","Industrial Polymers","Chicago, USA","North America",1998,"100-500","https://rawmat.example.com","sales@rawmat.example.com","+1 312 555 7890",4.2,85,88,82,80,"active","review","2023-09-05",5.5,"Economy","Net 60","2024-04-30","[{""name"":""ISO 9001:2015"",""valid"":true,""expirationDate"":""2024-05-20""},{""name"":""REACH Compliant"",""valid"":true,""expirationDate"":""2024-07-10""},{""name"":""ISO 14001:2015"",""valid"":false,""expirationDate"":""2023-06-15""}]","[{""month"":""Aug 2023"",""onTimeDelivery"":86,""qualityCompliance"":90,""costVariance"":1},{""month"":""Jul 2023"",""onTimeDelivery"":84,""qualityCompliance"":88,""costVariance"":2},{""month"":""Jun 2023"",""onTimeDelivery"":80,""qualityCompliance"":87,""costVariance"":0},{""month"":""May 2023"",""onTimeDelivery"":81,""qualityCompliance"":85,""costVariance"":-1},{""month"":""Apr 2023"",""onTimeDelivery"":83,""qualityCompliance"":86,""costVariance"":3},{""month"":""Mar 2023"",""onTimeDelivery"":79,""qualityCompliance"":84,""costVariance"":1}]","[{""category"":""Geopolitical"",""level"":""low"",""description"":""Stable business environment with favorable regulations""},{""category"":""Supply Chain"",""level"":""medium"",""description"":""Some vulnerability to raw material price fluctuations""},{""category"":""Financial"",""level"":""medium"",""description"":""Recent expansion has increased debt load""}]","[{""id"":301,""name"":""Industrial Polymers"",""category"":""Raw Materials"",""leadTime"":""2-4 weeks"",""minOrderQty"":500,""unitPrice"":40},{""id"":302,""name"":""Adhesives"",""category"":""Raw Materials"",""leadTime"":""1-2 weeks"",""minOrderQty"":200,""unitPrice"":30},{""id"":303,""name"":""Metals"",""category"":""Raw Materials"",""leadTime"":""3-5 weeks"",""minOrderQty"":1000,""unitPrice"":25}]","[{""id"":""ORD-2023-418"",""date"":""2023-09-05"",""status"":""Processing"",""amount"":26000},{""id"":""ORD-2023-389"",""date"":""2023-08-12"",""status"":""Delivered"",""amount"":18000},{""id"":""ORD-2023-360"",""date"":""2023-07-01"",""status"":""Delivered"",""amount"":22000}]","[{""date"":""2023-05-20"",""outcome"":""Partial"",""savings"":4.2},{""date"":""2022-10-05"",""outcome"":""Success"",""savings"":6.5},{""date"":""2022-04-15"",""outcome"":""Success"",""savings"":5.8}]"
4,"FastTrack Logistics","/images/supplier4.png","FastTrack Logistics offers comprehensive logistics solutions including express shipping, warehousing, and distribution services with a focus on speed and reliability for time-sensitive supply chains.","Logistics","Express Shipping","Atlanta, USA","North America",2007,"1000-5000","https://fasttracklogistics.example.com","info@fasttrack.example.com","+1 404 555 2345",4.6,90,88,95,88,"inactive","non-compliant","2023-09-10",4.8,"Premium","Net 15","2024-01-15","[{""name"":""ISO 9001:2015"",""valid"":true,""expirationDate"":""2024-03-15""},{""name"":""C-TPAT Certified"",""valid"":false,""expirationDate"":""2023-08-20""},{""name"":""ISPM 15 Compliant"",""valid"":true,""expirationDate"":""2024-02-28""}]","[{""month"":""Aug 2023"",""onTimeDelivery"":97,""qualityCompliance"":92,""costVariance"":2},{""month"":""Jul 2023"",""onTimeDelivery"":98,""qualityCompliance"":90,""costVariance"":1},{""month"":""Jun 2023"",""onTimeDelivery"":96,""qualityCompliance"":89,""costVariance"":0},{""month"":""May 2023"",""onTimeDelivery"":95,""qualityCompliance"":87,""costVariance"":3},{""month"":""Apr 2023"",""onTimeDelivery"":97,""qualityCompliance"":88,""costVariance"":2},{""month"":""Mar 2023"",""onTimeDelivery"":94,""qualityCompliance"":86,""costVariance"":1}]","[{""category"":""Geopolitical"",""level"":""low"",""description"":""Strong presence in stable markets""},{""category"":""Supply Chain"",""level"":""high"",""description"":""Vulnerable to fuel price fluctuations and labor shortages""},{""category"":""Financial"",""level"":""medium"",""description"":""High operational costs with thin margins""}]","[{""id"":401,""name"":""Express Shipping"",""category"":""Logistics"",""leadTime"":""1-3 days"",""minOrderQty"":1,""unitPrice"":8000},{""id"":402,""name"":""Warehousing"",""category"":""Logistics"",""leadTime"":""Immediate"",""minOrderQty"":1,""unitPrice"":5000},{""id"":403,""name"":""Distribution"",""category"":""Logistics"",""leadTime"":""1 week"",""minOrderQty"":1,""unitPrice"":7500}]","[{""id"":""ORD-2023-419"",""date"":""2023-09-10"",""status"":""Shipped"",""amount"":8000},{""id"":""ORD-2023-401"",""date"":""2023-08-22"",""status"":""Delivered"",""amount"":12500},{""id"":""ORD-2023-375"",""date"":""2023-08-05"",""status"":""Delivered"",""amount"":15000}]","[{""date"":""2023-08-05"",""outcome"":""Success"",""savings"":4.8},{""date"":""2023-01-20"",""outcome"":""Partial"",""savings"":3.2},{""date"":""2022-07-10"",""outcome"":""Success"",""savings"":5}]"
5,"Quality Service Providers","/images/supplier5.png","Quality Service Providers delivers professional consulting services focused on quality management, process improvement, and regulatory compliance for manufacturing and service industries.","Services","Quality Consulting","London, UK","Europe",2011,"50-100","https://qualityservices.example.com","enquiries@qualityservices.example.com","+44 20 5555 6789",4.1,82,87,80,94,"active","compliant","2023-08-15",8,"Standard","Net 45","2024-06-15","[{""name"":""ISO 9001:2015"",""valid"":true,""expirationDate"":""2025-01-10""},{""name"":""ISO 27001:2013"",""valid"":true,""expirationDate"":""2024-09-15""},{""name"":""Six Sigma Certification"",""valid"":true,""expirationDate"":""2024-05-20""}]","[{""month"":""Aug 2023"",""onTimeDelivery"":84,""qualityCompliance"":92,""costVariance"":-1},{""month"":""Jul 2023"",""onTimeDelivery"":82,""qualityCompliance"":90,""costVariance"":0},{""month"":""Jun 2023"",""onTimeDelivery"":80,""qualityCompliance"":89,""costVariance"":-2},{""month"":""May 2023"",""onTimeDelivery"":83,""qualityCompliance"":88,""costVariance"":1},{""month"":""Apr 2023"",""onTimeDelivery"":81,""qualityCompliance"":91,""costVariance"":-1},{""month"":""Mar 2023"",""onTimeDelivery"":79,""qualityCompliance"":87,""costVariance"":0}]","[{""category"":""Geopolitical"",""level"":""low"",""description"":""Operates in stable business environments""},{""category"":""Supply Chain"",""level"":""low"",""description"":""Service-based business with minimal supply chain dependencies""},{""category"":""Financial"",""level"":""medium"",""description"":""Small company with limited financial buffers""}]","[{""id"":501,""name"":""Consulting Services"",""category"":""Services"",""leadTime"":""On-demand"",""minOrderQty"":1,""unitPrice"":15000},{""id"":502,""name"":""Quality Audits"",""category"":""Services"",""leadTime"":""2-3 weeks"",""minOrderQty"":1,""unitPrice"":2000},{""id"":503,""name"":""Training"",""category"":""Services"",""leadTime"":""1-2 weeks"",""minOrderQty"":1,""unitPrice"":5000}]","[{""id"":""ORD-2023-416"",""date"":""2023-08-28"",""status"":""Processing"",""amount"":25000},{""id"":""ORD-2023-386"",""date"":""2023-07-12"",""status"":""Delivered"",""amount"":17000},{""id"":""ORD-2023-355"",""date"":""2023-06-05"",""status"":""Delivered"",""amount"":12000}]","[{""date"":""2023-06-30"",""outcome"":""Success"",""savings"":8},{""date"":""2022-12-20"",""outcome"":""Success"",""savings"":7.5},{""date"":""2022-06-05"",""outcome"":""Partial"",""savings"":4}]"
6,"ChemSolutions Ltd","/images/supplier6.png","ChemSolutions Ltd manufactures and distributes a wide range of industrial chemicals, solvents, and specialized chemical products for manufacturing, cleaning, and industrial processes.","Chemicals","Industrial Chemicals","Frankfurt, Germany","Europe",2003,"100-500","https://chemsolutions.example.com","sales@chemsolutions.example.com","+49 69 5555 8901",4.3,87,89,85,83,"active","compliant","2023-09-01",6.8,"Premium","Net 30","2024-05-15","[{""name"":""ISO 9001:2015"",""valid"":true,""expirationDate"":""2024-08-10""},{""name"":""ISO 14001:2015"",""valid"":true,""expirationDate"":""2024-07-15""},{""name"":""REACH Compliant"",""valid"":true,""expirationDate"":""2024-12-20""}]","[{""month"":""Aug 2023"",""onTimeDelivery"":89,""qualityCompliance"":92,""costVariance"":0},{""month"":""Jul 2023"",""onTimeDelivery"":87,""qualityCompliance"":90,""costVariance"":-1},{""month"":""Jun 2023"",""onTimeDelivery"":86,""qualityCompliance"":91,""costVariance"":1},{""month"":""May 2023"",""onTimeDelivery"":84,""qualityCompliance"":88,""costVariance"":0},{""month"":""Apr 2023"",""onTimeDelivery"":88,""qualityCompliance"":87,""costVariance"":2},{""month"":""Mar 2023"",""onTimeDelivery"":85,""qualityCompliance"":89,""costVariance"":-1}]","[{""category"":""Geopolitical"",""level"":""low"",""description"":""Operates in stable European markets with good regulatory oversight""},{""category"":""Supply Chain"",""level"":""medium"",""description"":""Some raw materials sourced from regions with potential instability""},{""category"":""Financial"",""level"":""low"",""description"":""Strong financial position with healthy profit margins""}]","[{""id"":601,""name"":""Solvents"",""category"":""Chemicals"",""leadTime"":""2-3 weeks"",""minOrderQty"":200,""unitPrice"":45},{""id"":602,""name"":""Adhesives"",""category"":""Chemicals"",""leadTime"":""1-2 weeks"",""minOrderQty"":100,""unitPrice"":60},{""id"":603,""name"":""Cleaning Chemicals"",""category"":""Chemicals"",""leadTime"":""1-2 weeks"",""minOrderQty"":300,""unitPrice"":35}]","[{""id"":""ORD-2023-412"",""date"":""2023-09-01"",""status"":""Processing"",""amount"":22000},{""id"":""ORD-2023-390"",""date"":""2023-08-10"",""status"":""Delivered"",""amount"":18500},{""id"":""ORD-2023-361"",""date"":""2023-07-05"",""status"":""Delivered"",""amount"":15000}]","[{""date"":""2023-07-15"",""outcome"":""Success"",""savings"":6.8},{""date"":""2022-12-05"",""outcome"":""Partial"",""savings"":4.5},{""date"":""2022-05-12"",""outcome"":""Success"",""savings"":7.2}]"

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "tech-hack-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "autoprefixer": "^10.4.21",
    "axios": "^1.8.3",
    "chart.js": "^4.4.8",
    "date-fns": "^4.1.0",
    "json2csv": "^6.0.0-alpha.2",
    "next": "15.2.2",
    "postcss": "^8.5.3",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "swr": "^2.3.3"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================================
End of Codebase
================================================================
